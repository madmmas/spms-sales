{"version":3,"file":"static/js/salesProfile.fd6cf078.chunk.js","mappings":"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","sources":["pages/transactional_data/sales/Form.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useForm, Controller } from 'react-hook-form';\nimport { InputText } from 'primereact/inputtext';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { FilterMatchMode } from 'primereact/api';\nimport { Button } from 'primereact/button';\nimport { Toast } from 'primereact/toast';\nimport { classNames } from 'primereact/utils';\nimport { Dialog } from 'primereact/dialog';\n\nimport SelectConstData from '../../components/SelectConstData';\nimport SelectMasterDataTableList from '../../components/SelectMasterDataTableList';\nimport SelectMasterData from '../../components/SelectMasterData';\n\nimport { CUSTOMER_CATEGORY } from '../../../constants/lookupData';\nimport { ON_SALES_PRODUCT } from '../../../constants/transactions';\nimport { PRODUCT_MODEL, CUSTOMER_MODEL, SALES_MODEL } from '../../../constants/models';\n\n\nimport SalesProductForm from './components/SalesProductForm';\nimport SalesProductDetail from './components/SalesProductDetail';\nimport SalesProductTotal from './components/SalesProductTotal';\n\nimport { TransactionService } from '../../../services/TransactionService';\nimport { ConfigurationService } from '../../../services/ConfigurationService';\nimport { OrderService } from '../../../services/OrderService';\n\nconst Form = React.memo(({ sales }) => {\n\n    let navigate = useNavigate();\n\n    let defaultFormValues = {\n        notes: '',\n        dtCustomer_id: '',\n        customer_category: 'WALKIN',\n        customer_phone: '',\n        customer_name: '',\n    };\n\n    let defaultSalesProduct = {\n        _id: null,\n        dtProduct_id: \"\",\n        barCode: \"\",\n        lastSalePrice: 0.00,\n\n        unitTradePrice: 0.00,\n        quantity: 1,  \n        totalPrice: 0.00,\n        discount: 0.00,\n        discountedAmount: 0.00,\n        netPrice: 0.00,\n\n        remarks: \"\",\n    };\n\n    const toast = useRef(null);\n\n    const [totalPrice, setTotalPrice] = useState(0.00);\n    const [totalDiscount, setTotalDiscount] = useState(0.00);\n    const [totalDiscountedAmount, setTotalDiscountedAmount] = useState(0.00);\n    const [totalQuantity, setTotalQuantity] = useState(0);\n    const [vat, setVat] = useState(0.00);\n    const [deliveryCost, setDeliveryCost] = useState(0.00);\n    const [vatPercentage, setVatPercentage] = useState(0.00);\n    const [netAmount, setNetAmount] = useState(0.00);\n\n    const [salesItems, setSalesItems] = useState([]);\n    const [selectedItem, setSelectedItem] = useState({});\n    const [selectedTableItem, setSelectedTableItem] = useState({});\n    const [selectedProduct, setSelectedProduct] = useState(defaultSalesProduct);\n    const [deleteProductDialog, setDeleteSalesProductDialog] = useState(false);\n    const [selectedCustomer, setSelectedCustomer] = useState(null);\n    const [selectedCustomer_currency] = useState(\"INR\");\n    const [customerCategory, setCustomerCategory] = useState(\"WALKIN\");\n    const [updateSaleItemMode, setUpdateSaleItemMode] = useState(false);\n    const [trxNo, setTrxNo] = useState('XXXXX');\n    const [dialogMsg, setDialogMsg] = useState('');\n    const [status, setStatus] = useState('draft');\n    const [editMode, setEditMode] = useState(true);\n\n    const orderService = new OrderService();\n    const configurationService = new ConfigurationService();\n\n    const {\n        control,\n        formState: { errors },\n        reset,\n        setValue,\n        handleSubmit\n    } = useForm({\n        defaultValues: defaultFormValues\n    });\n\n    useEffect(() => {\n        if (sales===null || sales===undefined) {\n            if (trxNo === 'XXXXX') {\n                configurationService.getNextId(SALES_MODEL).then(data => {\n                    setTrxNo(data.nextID);\n                    // console.log(\"NEXT ID::\", data.nextID);\n                });\n            }\n            // setEditMode(true);\n        } else {\n            // console.log(\"FETCHED-SALES::\", sales);    \n            reset({\n                id: sales.id,\n                party_type: sales.party_type,\n                dtCustomer_id: sales.party_id,\n                customer_category: sales.customer_category,\n                customer_phone: sales.customer_phone,\n                customer_name: sales.customer_name,\n                notes: sales.notes,\n            });\n            setSalesItems(sales.items);\n            calculateTotals(sales.items);\n            setTrxNo(sales.voucher_no);\n            setEditMode(sales.status === 'draft');\n            // console.log(\"EDIT MODE:::=>\", sales.status, sales.status === 'draft');\n        }\n    }, [sales]);\n\n\n    const onSubmit = (formData) => {\n\n        if(salesItems.length === 0) {\n            toast.current.show({ severity: 'error', summary: 'Error', detail: 'No Product Added', life: 3000 });\n            return;\n        }\n\n        formData.status = status;\n        formData.voucher_no = trxNo;\n\n        if(customerCategory === \"WALKIN\") {\n            formData.party_type = \" \";\n            formData.party_id = \" \";\n            formData.customer_phone = formData.customer_phone;\n            formData.customer_name = formData.customer_name;\n            // formData.customerAddress = '';\n            formData.salesStatus = \"COMPLETED\";\n        } else {\n            // console.log(\"selectedCustomer::\", selectedCustomer);\n            formData.party_type = \"dtCustomer\";\n            formData.party_id = selectedCustomer._id;\n            formData.customer_phone = selectedCustomer.phone;\n            formData.customer_name = selectedCustomer.name;\n            // formData.customerAddress = selectedCustomer.address;\n            // if(paymentData.dueAmount === 0.00) {\n            //     formData.salesStatus = \"COMPLETED\";\n            // } else {\n            //     formData.salesStatus = \"PENDING\";\n            // }\n        }\n\n        formData.items = salesItems;\n\n        formData.gross = totalPrice;\n        formData.discount = totalDiscount;\n        formData.duty_vat = vat;\n        formData.net = netAmount;\n        formData.due = netAmount;\n        formData.paid = 0;\n\n        try {\n            if (sales) {\n                orderService.update(SALES_MODEL, sales.id, formData).then(data => {\n                    toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Purchase Record Created', life: 3000 });\n                    // navigate(\"/sales\");\n                });                \n            } else {\n                orderService.create(SALES_MODEL, formData).then(data => {\n                    toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Purchase Record Created', life: 3000 });\n                    // navigate(\"/sales\");\n                });\n            }\n        }\n        catch (err){\n            console.log(err)\n            toast.current.show({ severity: 'error', summary: 'Error', detail: 'Failed to create Purchase Record!', life: 3000 });\n            // navigate(\"/sales\");  \n        }\n    };\n\n    const gotoList = () => {\n        navigate(\"/sales\");\n    };\n\n    const getFormErrorMessage = (name) => {\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\n    };\n\n    const addToSaleList = (addedItem) => {\n        let newSales = [...salesItems];\n        addedItem['index'] = salesItems.length;\n        newSales.push(addedItem);\n        setSalesItems(newSales);\n        calculateTotals(newSales);\n        clearProductSelection();\n    };\n\n    const updateSalelist = (dtSalesProduct) => {\n        let newSales = [...salesItems];\n        newSales[selectedProduct.index] = dtSalesProduct;\n        setSalesItems(newSales);\n        calculateTotals(newSales);\n        clearProductSelection();\n    };\n\n    const onVATChange = (vatPercentage) => {\n        setVatPercentage(vatPercentage);\n        let newSales = [...salesItems];\n        calculateTotals(newSales);\n    };\n\n    const onDeliveryCostChange = (deliveryCost) => {\n        setDeliveryCost(deliveryCost);\n        let newSales = [...salesItems];\n        calculateTotals(newSales);\n    };\n\n    const clearProductSelection = () => {\n        setSelectedProduct(defaultSalesProduct);\n        setSelectedItem({});\n        setSelectedTableItem({});\n        setUpdateSaleItemMode(false);\n    };\n\n    const clearAll = () => {\n        setSalesItems([]);\n        setTotalPrice(0.00);\n        setTotalDiscount(0.00);\n        setTotalQuantity(0);\n        setVat(0.00);\n        setDeliveryCost(0.00);\n        setVatPercentage(0.00);\n        setNetAmount(0.00);\n        setCustomerCategory(\"WALKIN\");\n        setSelectedCustomer({});\n        reset(defaultFormValues);\n    };\n\n    const removeItem = () => {\n        let newSales = [...salesItems];\n        newSales.splice(selectedProduct.index, 1);\n        setSalesItems(newSales);\n        setDeleteSalesProductDialog(false);\n    };\n\n    const calculateTotals = (allsales) => {\n        let total = 0.00;\n        let discount = 0.00;\n        let discountedAmount = 0.00;\n        let quantity = 0;\n        let vat = 0.00;\n        let netAmount = 0.00;\n        allsales.forEach(sale => {\n            total += sale.totalPrice;\n            discount += sale.discount;\n            discountedAmount += sale.discountedAmount;\n            quantity += sale.quantity;\n        });\n        vat = (total - discountedAmount) * (vatPercentage / 100);\n        netAmount = total - discountedAmount + vat + deliveryCost;\n        setTotalPrice(total);\n        setTotalDiscount(discount);\n        setTotalDiscountedAmount(discountedAmount);\n        setTotalQuantity(quantity);\n        setVat(vat);\n        setNetAmount(netAmount);\n    };\n\n    const editSalesProduct = (dtSalesProduct) => {\n        console.log(dtSalesProduct);\n        setSelectedProduct({ ...dtSalesProduct });\n        setSelectedTableItem({ \"id\": dtSalesProduct.dtProduct_id });\n        setUpdateSaleItemMode(true);\n    };\n\n    const onCustomerSelect = (selectedRow) => {\n        setSelectedCustomer(selectedRow);\n    };\n\n    const onCustomerCategoryChange = (value) => {\n        setCustomerCategory(value);\n        if(value === \"WALKIN\") {\n            setSelectedCustomer({});\n            setValue('dtCustomer_id', '');\n            setValue('notes', '');\n            setValue('customer_phone', '');\n            setValue('customer_name', '');\n        }\n    };\n\n    const onSelection = async (e) => {\n        let productSelected = e.value;\n        console.log(\"selectedCustomer::\", selectedCustomer);\n        if(selectedCustomer!==null || customerCategory===\"WALKIN\") {\n            if(updateSaleItemMode) {\n                toast.current.show({ severity: 'warn', summary: 'Please Cancel the update', detail: 'Product in update', life: 3000 });\n                return;\n            }\n\n            let alreadySelected = false;\n            salesItems.forEach(sale => {\n                if(sale.dtProduct_id === productSelected.id) {\n                    alreadySelected = true;\n                }\n            });\n            if(alreadySelected) {\n                toast.current.show({ severity: 'warn', summary: 'Already Added', detail: 'Product Already Added', life: 3000 });\n                setSelectedTableItem({});\n                setSelectedItem({});\n                setSelectedProduct(defaultSalesProduct);\n                return;\n            }\n\n            let lastTradePrice = 0\n            if(selectedCustomer!==null){\n                // crash here\n                // lastTradePrice = await productService.getProductCustomerLastPrice(productSelected._id, selectedCustomer);\n            }\n            productSelected['lastTradePrice'] = lastTradePrice;\n\n            setSelectedTableItem({ \"id\": productSelected.id });\n            setSelectedItem(productSelected);\n        } else {\n            toast.current.show({ severity: 'warn', summary: 'Please Select Customer', detail: 'Select a Customer First', life: 3000 });\n        }\n    }\n\n    let defaultFilters = {\n        fields: ['id', 'name', 'code', 'bar_code', 'brand_name', 'model_no', 'part_number', 'current_stock', 'price'],\n        first: 0,\n        rows: 10,\n        page: 1,\n        sortField: null,\n        sortOrder: null,\n        filters: {\n            global: { value: null, matchMode: FilterMatchMode.CONTAINS },\n            name: { value: null, matchMode: FilterMatchMode.CONTAINS },\n            brandName: { value: null, matchMode: FilterMatchMode.CONTAINS },\n            modelNo: { value: null, matchMode: FilterMatchMode.CONTAINS },\n            partNumber: { value: null, matchMode: FilterMatchMode.CONTAINS }\n        }\n    }\n\n    const confirmDeleteSalesProduct = (dtSalesProduct) => {\n        setDeleteSalesProductDialog(true);\n    };\n\n    const hideDeleteSalesProductDialog = () => {\n        setDeleteSalesProductDialog(false);\n    };\n\n    const deleteProductDialogFooter = (\n        <>\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteSalesProductDialog} />\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={removeItem} />\n        </>\n    );\n\n    return (\n\n    <div className=\"grid h-screen\">    \n    <Toast ref={toast} />    \n    <div className=\"card col-5\">\n        <h5><Button onClick={() => gotoList()} className=\"p-button-outlined\" label=\"Go Back\" /> Sale Detail :: VoucherNo ({trxNo}) </h5>\n        <div className=\"card col-12 md:col-12\">\n        <SelectMasterDataTableList displayField=\"name\"\n                fieldValue=\"\"\n                scrollHeight=\"300px\"\n                defaultFilters={defaultFilters}\n                modelName={PRODUCT_MODEL} caption=\"Select Product\"\n                selectedItem={selectedTableItem}\n                showFields={[]} onSelect={onSelection}\n                columns={[\n                    {field: 'name', header: 'Product Name', filterPlaceholder: 'Filter by Product Name', width: '50rem'}, \n                    {field: 'brand_name', header: 'Brand Name', filterPlaceholder: 'Filter by Barnd Name', width: '15rem'},\n                    {field: 'model_no', header: 'Model No', filterPlaceholder: 'Filter by Model No', width: '15rem'},\n                    {field: 'part_number', header: 'Part Number', filterPlaceholder: 'Filter by Part Number', width: '15rem'},\n                    {field: 'category_name', header: 'Product Category', filterPlaceholder: 'Filter by Product Category', width: '15rem'}\n    ]} \n                />\n        </div>\n        <div className=\"card col-12 md:col-12\">\n            <div className=\"p-fluid formgrid grid\">\n                <div className=\"field col-12 md:col-4\">\n                <Controller\n                    name=\"customer_category\"\n                    control={control}\n                    render={({ field, fieldState }) => (\n                    <>\n                        <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Customer Category</label>\n                        <SelectConstData field={field} data={CUSTOMER_CATEGORY}\n                            onSelectChange={(value) => onCustomerCategoryChange(value)}\n                            className={classNames({ 'p-invalid': fieldState.error })} /> \n                        {getFormErrorMessage(field.name)}\n                    </>\n                )}/>\n                </div>\n                <div className=\"field col-12 md:col-8\">\n                <Controller\n                    name=\"notes\"\n                    control={control}\n                    render={({ field, fieldState }) => (\n                        <>\n                    <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Notes</label>\n                    <InputTextarea inputId={field.name} value={field.value} inputRef={field.ref}  onChange={(e) => field.onChange(e.target.value)} />\n                        </>\n                    )}/>\n                </div>\n\n                <div className=\"field col-12 md:col-2\">\n                    <Button type=\"submit\" label=\"Cancel Order\" className=\"p-button-outlined p-button-warning\" \n                        onClick={() => clearAll()}\n                    />\n                </div>\n                <div className=\"field col-12 md:col-2\">\n                    <Button type=\"submit\" label=\"Save Order\" className=\"p-button p-button-success\" \n                        onClick={handleSubmit((d) => onSubmit(d))}\n                    />\n                </div>\n\n                {(customerCategory === \"WALKIN\") && (<div className=\"grid col-12 md:col-8\">\n                <div className=\"field col-12 md:col-6\">\n                <Controller\n                    name=\"customer_phone\"\n                    control={control}\n                    rules={{ required: 'Mobile Number is required.' }}\n                    render={({ field, fieldState }) => (\n                        <>\n                    <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Mobile Number</label>\n                    <InputText inputId={field.name} value={field.value} inputRef={field.ref}  onChange={(e) => field.onChange(e.target.value)} />\n                    {getFormErrorMessage(field.name)}\n                        </>\n                    )}/>\n                </div>\n                <div className=\"field col-12 md:col-6\">\n                <Controller\n                    name=\"customer_name\"\n                    control={control}\n                    render={({ field, fieldState }) => (\n                        <>\n                    <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Name</label>\n                    <InputText inputId={field.name} value={field.value} inputRef={field.ref}  onChange={(e) => field.onChange(e.target.value)} className={classNames({ 'p-invalid': fieldState.error })}/>\n                        </>\n                    )}/>\n                </div>\n                </div>)}\n                {(customerCategory !== \"WALKIN\") && (<div className=\"grid col-12 md:col-8\">\n                <div className=\"field col-12 md:col-8\">\n                <Controller\n                    name=\"dtCustomer_id\"\n                    control={control}\n                    rules={{ required: 'Custmer is required.' }}\n                    render={({ field, fieldState }) => (\n                    <>\n                        <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Customer*</label>\n                        <SelectMasterData field={field} modelName={CUSTOMER_MODEL}\n                            displayField=\"name\"\n                            onSelect={onCustomerSelect}\n                            className={classNames({ 'p-invalid': fieldState.error })} \n                            columns={[\n                                {field: 'name', header: 'Customer Name', filterPlaceholder: 'Filter by Customer Name'}\n                            ]} />\n                        {getFormErrorMessage(field.name)}\n                    </>\n                )}/>\n                </div>\n                <div className=\"field col-12 md:col-4\">\n                    <label>Last Voucher</label>\n                    <InputText  readOnly={true}/>\n                </div>\n                </div>)}\n            </div>\n        </div>\n    </div>\n    <div className=\"card col-7\" >\n        <SalesProductForm \n            onAdd={(dt) => addToSaleList(dt)} \n            onEdit={(dt) => updateSalelist(dt)}\n            onCancel={() => clearProductSelection()}\n            currency={selectedCustomer_currency} \n            defaultSalesProduct={defaultSalesProduct} \n            selectedItem={selectedItem}\n            selectedProduct={selectedProduct}\n            />\n        <SalesProductTotal sales={salesItems}\n                totalPrice={totalPrice} netAmount={netAmount} \n                totalDiscount={totalDiscountedAmount} \n                vat={vat} onVATChange={onVATChange}\n                onDeliveryCostChange={onDeliveryCostChange}\n                onEdit={(dt) => editSalesProduct(dt)} \n                onDelete={(dt) => confirmDeleteSalesProduct(dt)}\n            />\n        <SalesProductDetail sales={salesItems}\n                totalPrice={totalPrice} netAmount={netAmount} \n                totalDiscount={totalDiscountedAmount} \n                vat={vat} onVATChange={onVATChange}\n                onDeliveryCostChange={onDeliveryCostChange}\n                onEdit={(dt) => editSalesProduct(dt)} \n                onDelete={(dt) => confirmDeleteSalesProduct(dt)}\n            />\n        <Dialog visible={deleteProductDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductDialogFooter} onHide={hideDeleteSalesProductDialog}>\n            <div className=\"flex align-items-center justify-content-center\">\n                <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\n                <span>\n                    Are you sure you want to delete?\n                </span>\n            </div>\n        </Dialog>\n    </div>     \n    </div>\n    );\n});\n                 \nexport default Form;"],"names":["Form","React","_ref","sales","navigate","useNavigate","defaultFormValues","notes","dtCustomer_id","customer_category","customer_phone","customer_name","defaultSalesProduct","_id","dtProduct_id","barCode","lastSalePrice","unitTradePrice","quantity","totalPrice","discount","discountedAmount","netPrice","remarks","toast","useRef","_useState","useState","_useState2","_slicedToArray","setTotalPrice","_useState3","_useState4","totalDiscount","setTotalDiscount","_useState5","_useState6","totalDiscountedAmount","setTotalDiscountedAmount","_useState7","_useState8","setTotalQuantity","_useState9","_useState10","vat","setVat","_useState11","_useState12","deliveryCost","setDeliveryCost","_useState13","_useState14","vatPercentage","setVatPercentage","_useState15","_useState16","netAmount","setNetAmount","_useState17","_useState18","salesItems","setSalesItems","_useState19","_useState20","selectedItem","setSelectedItem","_useState21","_useState22","selectedTableItem","setSelectedTableItem","_useState23","_useState24","selectedProduct","setSelectedProduct","_useState25","_useState26","deleteProductDialog","setDeleteSalesProductDialog","_useState27","_useState28","selectedCustomer","setSelectedCustomer","_useState29","selectedCustomer_currency","_useState31","_useState32","customerCategory","setCustomerCategory","_useState33","_useState34","updateSaleItemMode","setUpdateSaleItemMode","_useState35","_useState36","trxNo","setTrxNo","_useState37","_useState38","_useState39","_useState40","status","_useState41","_useState42","setEditMode","orderService","OrderService","configurationService","ConfigurationService","_useForm","useForm","defaultValues","control","errors","formState","reset","setValue","handleSubmit","useEffect","undefined","getNextId","SALES_MODEL","then","data","nextID","id","party_type","party_id","items","calculateTotals","voucher_no","getFormErrorMessage","name","_jsx","className","children","message","onVATChange","newSales","_toConsumableArray","onDeliveryCostChange","clearProductSelection","allsales","total","forEach","sale","editSalesProduct","dtSalesProduct","console","log","_objectSpread","onCustomerSelect","selectedRow","onSelection","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","productSelected","alreadySelected","wrap","_context","prev","next","value","current","show","severity","summary","detail","life","abrupt","stop","_x","apply","arguments","defaultFilters","fields","first","rows","page","sortField","sortOrder","filters","global","matchMode","FilterMatchMode","brandName","modelNo","partNumber","confirmDeleteSalesProduct","hideDeleteSalesProductDialog","deleteProductDialogFooter","_jsxs","_Fragment","Button","label","icon","onClick","splice","index","Toast","ref","SelectMasterDataTableList","displayField","fieldValue","scrollHeight","modelName","PRODUCT_MODEL","caption","showFields","onSelect","columns","field","header","filterPlaceholder","width","Controller","render","_ref3","fieldState","htmlFor","classNames","SelectConstData","CUSTOMER_CATEGORY","onSelectChange","onCustomerCategoryChange","error","_ref4","InputTextarea","inputId","inputRef","onChange","target","type","d","formData","length","salesStatus","phone","gross","duty_vat","net","due","paid","update","create","err","onSubmit","rules","required","_ref5","InputText","_ref6","_ref7","SelectMasterData","CUSTOMER_MODEL","readOnly","SalesProductForm","onAdd","dt","addedItem","push","addToSaleList","onEdit","updateSalelist","onCancel","currency","SalesProductTotal","onDelete","SalesProductDetail","Dialog","visible","style","modal","footer","onHide","fontSize"],"sourceRoot":""}
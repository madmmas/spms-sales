{"version":3,"file":"static/js/damagedStock.9c82628b.chunk.js","mappings":"++BAAO,IAAMA,EAAa,SACbC,EAAqB,gBACrBC,EAAa,SACbC,EAAiB,aACjBC,EAAiB,aACjBC,EAAoB,sBAEpBC,EAAgB,YAChBC,EAAiB,aACjBC,EAAkB,cAClBC,EAAc,UAGdC,EAAsB,kBACtBC,EAAyB,qBACzBC,EAAgB,aAChBC,EAAqB,iBAErBC,EAAiB,cACjBC,EAAc,WACdC,EAAiB,aACjBC,EAAkB,cAElBC,EAAiB,kBACjBC,EAAc,eACdC,EAAgB,kBAChBC,EAAgB,kBAGhBC,EAAmB,aAEnBC,EAA0B,qBAC1BC,EAAmB,eACnBC,EAAoB,gBACpBC,EAAqB,gBACrBC,EAA0B,oBAC1BC,EAAc,UACdC,EAAc,UACdC,EAAkB,iBAClBC,EAAkB,iBAClBC,EAAoB,eACpBC,EAAqB,gBACrBC,EAAyB,oBACzBC,EAAc,UACdC,EAA0B,oB,gLC5ChC,IAaMC,EAAuB,oBACvBC,EAAuB,oBACvBC,EAA0B,sBAC1BC,EAA0B,sBAG1BC,EAAmB,iBACnBC,EAAsB,mB,mJCbpB,SAASC,EAAuBC,GAAyI,IAAtIC,EAAcD,EAAdC,eAAgBC,EAAUF,EAAVE,WAAYC,EAAQH,EAARG,SAAqBC,GAAFJ,EAATK,UAAkBL,EAAPI,SAEzFE,GAFgGN,EAAEO,WAAaP,EAAEQ,QAAgBR,EAAES,aAAmBT,EAAEU,aAEnJC,EAAAA,EAAAA,QAAO,OACZC,GAAKD,EAAAA,EAAAA,QAAO,MAElBE,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAkDL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvDE,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAC9CG,GAAwCT,EAAAA,EAAAA,UAAS,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA5CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAAoCb,EAAAA,EAAAA,UAASb,GAAe2B,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAArDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAA8BjB,EAAAA,EAAAA,UAAS,IAAGkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAAsCrB,EAAAA,EAAAA,UAAS,CAAC,GAAEsB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAA3CE,EAAWD,EAAA,GAEZE,GAF4BF,EAAA,GAEX,IAAIG,EAAAA,IAa3BC,EAAAA,EAAAA,YAAU,WACNC,GACJ,GAAG,KAEHD,EAAAA,EAAAA,YAAU,WAdNtB,GAAW,GAEXoB,EAAeI,OAAOb,GAAYc,MAAK,SAAAC,GAEnClB,EAAgBkB,EAAKC,OACrBX,EAAWU,EAAKE,MAChB5B,GAAW,EACf,GASJ,GAAG,CAACW,IAEJ,IAAMY,EAAc,WAChBX,EAAc7B,GACdqB,EAAqB,GACzB,EAwCMyB,EAAe,SAACH,GAAI,OAAKA,EAAKI,KAAO9C,CAAW,EAMtD,OACI+C,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,QAAMG,UAAU,oBAAmBD,SAAA,EAC/BE,EAAAA,EAAAA,KAAA,KAAGD,UAAU,kBACbC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,MAAOlC,EAAmBmC,SAhCpB,SAACC,GAC1B,IAAIC,GAAWC,EAAAA,EAAAA,GAAA,GAAQ9B,GAEjB0B,EAAQE,EAAEG,OAAOL,MAEvBjC,EAAqBiC,GAER,OAAVA,QAA4BM,IAAVN,IAIrBG,EAAqB,QAAU,OAAEH,MAAQA,EACzCG,EAAmB,MAAI,EACvB5B,EAAc4B,GAClB,EAmBgBI,QAAS,SAACL,GAAO7C,EAAGmD,QAAQC,KAAKP,EAAE,EACnCQ,QAAS,SAACR,GAAOA,EAAEG,OAAOM,QAAQ,EAClCC,YAAY,eAEpBd,EAAAA,EAAAA,KAACe,EAAAA,EAAY,CAACC,IAAKzD,EAAI0D,eAAa,EAAAnB,UAChCF,EAAAA,EAAAA,MAACsB,EAAAA,EAAS,CACNF,IAAK/D,EAAIiD,MAAOtB,EAASuC,QAAQ,KACjCpB,UAAU,uBAAuBqB,iBAAiB,SAClDC,MAAI,EAACzD,QAASA,EAAS6B,KAAMjB,EAAWiB,KACxC6B,OArDD,SAACC,GACZ,IAAIlB,GAAWC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ9B,GAAe+C,GACtC9C,EAAc4B,EAClB,EAkDgCmB,UAAWhD,EAAWgD,UAAWC,UAAWjD,EAAWiD,UACvEC,SAjDC,SAACH,GACd,IAAIlB,GAAWC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ9B,GAAe+C,GACtClB,EAAmB,MAAI,EACvB5B,EAAc4B,EAClB,EA6CoCsB,cAAc,MAClCC,QAASpD,EAAWoD,QACpBC,iBArBQ,SAACN,GAAK,OAAMA,EAAMhC,MAAOG,EAAa6B,EAAMhC,KAAY,EAqB7BuC,aAnB9B,SAACvC,GAAI,OAAMG,EAAaH,GAAQ,GAAK,YAAY,EAoBtDwC,YAAU,EAACC,aAAa,OAAOC,WAAY,CAAEC,SAAU,SACvDC,WAAS,EAAC/D,aAAcA,EAAcgE,OA/DvC,SAACb,GACZ,IAAIlB,GAAWC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ9B,GAAe+C,GACtC9C,EAAc4B,EAClB,EA4DsEgC,MAAO7D,EAAW6D,MACxEC,kBAAkB,uGAClBC,mBAAoB,CAAC,EAAE,GAAI,IAC3BC,0BAA0B,sDAC1BC,mBAAoB,CAAC,QACrBC,cAAc,SAASC,UAAW3D,EAClC4D,kBAAmB,SAACxC,IArChB,SAACA,GACjB7C,EAAGmD,QAAQmC,OACX5E,EAAqB,IACrBnB,EAASsD,EACb,CAiC2C0C,CAAY1C,EAAE,EACzC2C,aAAa,iBAAgBjD,SAAA,EAE7BE,EAAAA,EAAAA,KAACgD,EAAAA,EAAM,CAACN,cAAc,SAASO,YAAa,CAAEf,SAAU,UACvDnF,EAAQmG,KAAI,SAACC,EAAKC,GACf,OACIpD,EAAAA,EAAAA,KAACgD,EAAAA,EAAM,CAAaK,MAAOF,EAAIE,MAAOC,OAAQH,EAAIG,OAAQC,QAAM,EAACC,kBAAmBL,EAAIK,kBAAmBC,UAAQ,EAACR,YAAa,CAAES,MAAOP,EAAIO,QAAjIN,EAErB,WAKpB,CCxHe,SAASO,EAAkBhH,GAAqH,IAAlH0G,EAAK1G,EAAL0G,MAAOO,EAAYjH,EAAZiH,aAAYC,EAAAlH,EAAEO,WAAAA,OAAU,IAAA2G,EAAC,GAAEA,EAAEjH,EAAcD,EAAdC,eAAgBI,EAASL,EAATK,UAAW+C,EAASpD,EAAToD,UAAWhD,EAAOJ,EAAPI,QAAO+G,EAAAnH,EAAEQ,QAAAA,OAAO,IAAA2G,EAAC,SAAQA,EAAEhH,EAAQH,EAARG,SAExImC,EAAiB,IAAIC,EAAAA,EAE3B1B,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CwB,EAAWtB,EAAA,GAAEqG,EAAcrG,EAAA,GAClCI,GAA8BL,EAAAA,EAAAA,UAAS,GAAEM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAlCkG,EAAOjG,EAAA,GAAEkG,EAAUlG,EAAA,IAE1BoB,EAAAA,EAAAA,YAAU,WACU,MAAbkE,EAAMnD,OAA4B,IAAbmD,EAAMnD,MAI9BjB,EAAeiF,QAAQb,EAAMnD,OAAOZ,MAAK,SAAAC,GACrCwE,EAAexE,EAAKqE,GACxB,IALIG,EAAe,GAMvB,GAAG,CAACV,EAAMnD,QAQV,OACIN,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACkE,SAAS,OAAOjE,MAAOlB,EAAa8B,YAAa3D,EACxD4C,UAAWA,EACXU,QAAS,kBAAMwD,GAAW,SAACD,GAAO,OAAKA,EAAU,CAAC,GAAC,KAEvDhE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACmE,QAAM,EAACC,QAAShB,EAAMiB,KAAMpE,MAAOmD,EAAMnD,MAAOqE,SAAUlB,EAAMrC,OAC3EhB,EAAAA,EAAAA,KAACtD,EAAuB,CAACkH,aAAcA,EAAcI,QAASA,EAC1DQ,UAAWnB,EAAMiB,KAAMzH,WAAYwG,EAAMnD,MAAOuE,SAAUpB,EAAMrC,IAChEpE,eAAgBA,EAChBI,UAAWA,EAAWG,QAASA,EAC/B4C,UAAWA,EAAWhD,QAASA,EAASG,WAAYA,EACpDJ,SAlBQ,SAACsD,GACjB2D,EAAe3D,EAAEF,MAAM0D,IACvBP,EAAMlD,SAASC,EAAEF,MAAMP,IACvB7C,EAASsD,EAAEF,MACf,MAiBJ,C,wOCiSA,UA1TqB,WAEjB,IAAMlD,EAAYvC,EAAAA,GAEdiK,EAAe,CACfC,KAAMC,KAAKC,MACXC,aAAc,KACdC,SAAU,EACVC,QAAS,IAGPC,GAAQ3H,EAAAA,EAAAA,QAAO,MACfL,GAAKK,EAAAA,EAAAA,QAAO,MACZ4H,GAAc5H,EAAAA,EAAAA,QAAO,MACrB6H,GAAa7H,EAAAA,EAAAA,QAAO,MAEtBV,EAAiB,CACjBwI,OAAQ,GACR/C,MAAO,EACP5C,KAAM,GACN4F,KAAM,EACN7D,UAAW,KACXC,UAAW,KACXG,QAAS,CACL,KAAQ,CAAE0D,SAAUC,EAAAA,GAAeC,GAAIC,YAAa,CAAC,CAAEvF,MAAO,KAAMwF,UAAWC,EAAAA,GAAgBC,iBAIvGpI,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAwCL,EAAAA,EAAAA,UAAS,GAAEM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA5CM,EAAYL,EAAA,GAAEM,EAAeN,EAAA,GACpCG,GAA0CT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjD2H,EAAc1H,EAAA,GAAE2H,EAAe3H,EAAA,GACtCG,GAAoCb,EAAAA,EAAAA,UAASb,GAAe2B,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAArDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAgCjB,EAAAA,EAAAA,WAAS,GAAMkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAAxCqH,EAAQpH,EAAA,GAAEqH,EAAWrH,EAAA,GAC5BG,GAAkCrB,EAAAA,EAAAA,WAAS,GAAMsB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAA1CmH,EAASlH,EAAA,GAAEmH,EAAYnH,EAAA,GAExBoH,EAAqB,IAAIC,EAAAA,EAE/BC,GAMIC,EAAAA,EAAAA,IAAQ,CACRC,cAAe7B,IALf8B,GADQH,EAARI,SACOJ,EAAPG,SACaE,GAAML,EAAnBM,UAAaD,OACbE,GAAUP,EAAVO,WACAC,GAAYR,EAAZQ,cAKJ1H,EAAAA,EAAAA,YAAU,WACNC,IACJ,GAAG,IAEH,IAAM0H,GAAc,WAChB1H,IACJ,EAEMA,GAAc,WAChBX,EAAc7B,EAClB,GAEAuC,EAAAA,EAAAA,YAAU,WACN4H,IACJ,GAAG,CAACvI,IAEJ,IAAMuI,GAAe,WACjBlJ,GAAW,GAEXsI,EAAmB9G,OAAOrC,EAAW,CAAEgK,OAAQC,KAAKC,UAAU1I,KAAec,MAAK,SAAAC,GAC9E4H,QAAQC,IAAI7H,GACZlB,EAAgBkB,EAAKC,OACrBsG,EAAgBvG,EAAKE,MACrB5B,GAAW,EACf,GACJ,EAEMwJ,GAAY,WACdpK,EAAGyD,QAAQ2G,WACf,EAgBMC,GAAkB,SAACtI,GACrBmI,QAAQC,IAAI,qBAAsBpI,GAElCkG,EAAYxE,QAAQ6G,OACxB,EAWMC,GAAY,WACdZ,GAAW,gBACXA,GAAW,YACXA,GAAW,WACXV,GAAa,EACjB,EA4FMuB,GAAsB,SAACnD,GACzB,OAAOoC,GAAOpC,KAAStE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,UAASD,SAAE4G,GAAOpC,GAAMoD,SACpE,EAEMC,GAAW,WACb3B,GAAY,EAChB,EAEM4B,IACFhI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,KAAC6H,EAAAA,EAAM,CAACC,MAAM,SAASC,KAAK,cAAchI,UAAU,gBAAgBU,QAASkH,MAC7E3H,EAAAA,EAAAA,KAAC6H,EAAAA,EAAM,CAACG,SAAU/B,EAAW6B,MAAM,OAAOC,KAAK,cAAchI,UAAU,gBAAgBU,QAASoG,IAAa,SAACoB,GAAC,OA/F/F,SAACC,GAErB,GADAhC,GAAa,KACThB,EAAYxE,QAAQR,MAAQ,GAAhC,CAGA,IAAIiI,EAAQ,CACRrD,aAAcoD,EAASpD,aACvBC,SAAUmD,EAASnD,SACnBC,QAASkD,EAASlD,SAEtBmC,QAAQC,IAAIe,GACZhC,EAAmBiC,mBAAmB5L,EAAAA,GAAkB2L,GAAO7I,MAAK,SAAA+I,GAChElB,QAAQC,IAAIiB,GACRA,EAASC,SACTrD,EAAMvE,QAAQC,KAAK,CAAE4H,SAAU,UAAWC,QAAS,aAAcC,OAAQ,sBAAuBC,KAAM,MACtGlB,KACAxB,GAAY,GACZe,MAEA9B,EAAMvE,QAAQC,KAAK,CAAE4H,SAAU,QAASC,QAAS,QAASC,OAAQJ,EAASX,QAASgB,KAAM,KAElG,GAjBA,CAkBJ,CAyE4HC,CAAgBV,EAAE,SAI9I,OACIjI,EAAAA,EAAAA,KAAA,OAAKD,UAAU,iBAAgBD,UAC3BE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,SAAQD,UACnBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,OAAMD,SAAA,EACjBE,EAAAA,EAAAA,KAAC4I,EAAAA,EAAK,CAAC5H,IAAKiE,KACZjF,EAAAA,EAAAA,KAAC6I,EAAAA,EAAO,CAAC9I,UAAU,OAAO+I,KAhFd,WACxB,OACI9I,EAAAA,EAAAA,KAAC+I,EAAAA,SAAc,CAAAjJ,UACXE,EAAAA,EAAAA,KAAC6H,EAAAA,EAAM,CAACpH,QAAS,kBA/BzB+G,UACAxB,GAAY,EA8B4B,EAAEjG,UAAU,iCAAiC+H,MAAM,uBAG/F,EA0EqEkB,MAxExC,WACzB,OACIhJ,EAAAA,EAAAA,KAAC+I,EAAAA,SAAc,CAAAjJ,UACXE,EAAAA,EAAAA,KAAC6H,EAAAA,EAAM,CAACC,MAAM,SAASC,KAAK,eAAehI,UAAU,gBAAgBU,QAAS4G,MAG1F,KAoEgBzH,EAAAA,EAAAA,MAACsB,EAAAA,EAAS,CACNF,IAAK/D,EAAIiD,MAAO2F,EAAgB1E,QAAQ,MACxCpB,UAAU,uBAAuBqB,iBAAiB,SAClDC,MAAI,EAACzD,QAASA,EAAS6B,KAAMjB,EAAWiB,KACxC6B,OArJL,SAACC,GACZ,IAAIlB,GAAWC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ9B,GAAe+C,GACtC9C,EAAc4B,EAClB,EAkJoCmB,UAAWhD,EAAWgD,UAAWC,UAAWjD,EAAWiD,UACvEC,SAjJH,SAACH,GACd,IAAIlB,GAAWC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ9B,GAAe+C,GACtClB,EAAmB,MAAI,EACvB5B,EAAc4B,EAClB,EA6IwCuB,QAASpD,EAAWoD,QAASD,cAAc,OAC/DI,YAAU,EAACkH,iBAAiB,SAASC,kBAAgB,EAACC,eAAa,EACnEhH,WAAS,EAAC/D,aAAcA,EAAcgE,OA5J3C,SAACb,GACZ,IAAIlB,GAAWC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ9B,GAAe+C,GACtC9C,EAAc4B,EAClB,EAyJ0EgC,MAAO7D,EAAW6D,MACxEC,kBAAkB,uGAClBC,mBAAoB,CAAC,EAAE,GAAG,GAAG,IAC7BC,0BAA0B,sDAC1BO,aAAa,iBAAiBO,OA7E7B,WACjB,OACI1D,EAAAA,EAAAA,MAAA,OAAKG,UAAU,+BAA8BD,SAAA,EACzCE,EAAAA,EAAAA,KAAA,MAAID,UAAU,MAAKD,SAAC,mBACpBE,EAAAA,EAAAA,KAAC6H,EAAAA,EAAM,CAACuB,KAAK,SAASrB,KAAK,qBAAqBD,MAAM,UAAU/H,UAAU,oBAAoBU,QAASqG,OAGnH,EAsEuEhH,SAAA,EAEnDE,EAAAA,EAAAA,KAACgD,EAAAA,EAAM,CAACK,MAAM,OAAOC,OAAO,uBAAuBC,QAAM,EAACC,kBAAkB,iBAAiBC,UAAQ,EAAC4F,KAlEjG,SAACC,GACtB,OACItJ,EAAAA,EAAAA,KAAAH,EAAAA,SAAA,CAAAC,UANS6E,EAOI2E,EAAQ3E,KANlB4E,EAAOC,SAAS7E,IAAO8E,OAAO,0BADzB,IAAC9E,CAUjB,EA4DkJ1B,YAAa,CAAEf,SAAU,YACvJlC,EAAAA,EAAAA,KAACgD,EAAAA,EAAM,CAACK,MAAM,eAAeC,OAAO,eAAeC,QAAM,EAACC,kBAAkB,iBAAiBC,UAAQ,EAAC4F,KA9IjG,SAACC,GACtB,OACItJ,EAAAA,EAAAA,KAAAH,EAAAA,SAAA,CAAAC,SACKwJ,EAAQhF,MAGrB,EAwIkJrB,YAAa,CAAEf,SAAU,YACvJlC,EAAAA,EAAAA,KAACgD,EAAAA,EAAM,CAACK,MAAM,WAAWC,OAAO,WAAWC,QAAM,EAACC,kBAAkB,iBAAiBC,UAAQ,EAAC4F,KA5DrF,SAACC,GAC1B,OACItJ,EAAAA,EAAAA,KAAAH,EAAAA,SAAA,CAAAC,SACKwJ,EAAQvE,UAGrB,EAsD8I9B,YAAa,CAAEf,SAAU,YACnJlC,EAAAA,EAAAA,KAACgD,EAAAA,EAAM,CAACK,MAAM,UAAUC,OAAO,UAAUC,QAAM,EAACC,kBAAkB,iBAAiBC,UAAQ,EAAC4F,KArDpF,SAACC,GACzB,OACItJ,EAAAA,EAAAA,KAAAH,EAAAA,SAAA,CAAAC,SACKwJ,EAAQtE,SAGrB,EA+C2I/B,YAAa,CAAEf,SAAU,YAChJlC,EAAAA,EAAAA,KAACgD,EAAAA,EAAM,CAACK,MAAM,aAAaC,OAAO,cAAcC,QAAM,EAACC,kBAAkB,iBAAiBC,UAAQ,EAAC4F,KA/CxF,SAACC,GAC5B,OACItJ,EAAAA,EAAAA,KAAAH,EAAAA,SAAA,CAAAC,SACKwJ,EAAQI,YAGrB,EAyCqJzG,YAAa,CAAEf,SAAU,eAG9JlC,EAAAA,EAAAA,KAAC2J,EAAAA,EAAM,CAACC,QAAS7D,EAAU8D,MAAO,CAAEnG,MAAO,SAAWJ,OAAM,oBAAuBwG,OAAK,EAAC/J,UAAU,UAAUgK,OAAQnC,GAAcoC,OAAQrC,GAAS7H,UAChJF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wBAAuBD,SAAA,EAClCE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,wBAAuBD,UACtCE,EAAAA,EAAAA,KAACiK,EAAAA,GAAU,CACP3F,KAAK,eACLkC,QAASA,EACT0D,MAAO,CAAEC,SAAU,wBACfC,OAAQ,SAAAzN,GAAA,IAAG0G,EAAK1G,EAAL0G,MAAOgH,EAAU1N,EAAV0N,WAAU,OAC5BzK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,KAAA,SAAOsK,QAASjH,EAAMiB,KAAMvE,WAAWwK,EAAAA,EAAAA,IAAW,CAAE,UAAW7D,GAAOxG,QAASJ,SAAC,cAChFE,EAAAA,EAAAA,KAAC2D,EAAAA,EAAkB,CAACN,MAAOA,EAAOrG,UAAW3C,EAAAA,GACzCuJ,aAAa,OACb7D,WAAWwK,EAAAA,EAAAA,IAAW,CAAE,YAAaF,EAAWG,QAChD1N,SAAUwK,GACV1K,eAAgBA,EAChBG,QAAS,CACL,CAACsG,MAAO,OAAQC,OAAQ,eAAgBE,kBAAmB,yBAA0BE,MAAO,SAC5F,CAACL,MAAO,YAAaC,OAAQ,aAAcE,kBAAmB,uBAAwBE,MAAO,SAC7F,CAACL,MAAO,UAAWC,OAAQ,WAAYE,kBAAmB,qBAAsBE,MAAO,SACvF,CAACL,MAAO,aAAcC,OAAQ,cAAeE,kBAAmB,wBAAyBE,MAAO,SAChG,CAACL,MAAO,iCAAkCC,OAAQ,mBAAoBE,kBAAmB,6BAA8BE,MAAO,YAErI+D,GAAoBpE,EAAMiB,QAC5B,OAGXtE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,wBAAuBD,UACtCE,EAAAA,EAAAA,KAACiK,EAAAA,GAAU,CACP3F,KAAK,WACLkC,QAASA,EACT0D,MAAO,CACHO,SAAU,SAACvK,GAAK,OAAMA,EAAQ,GAAM,qCAAqC,GAE7EkK,OAAQ,SAAAM,GAAA,IAAGrH,EAAKqH,EAALrH,MAAOgH,EAAUK,EAAVL,WAAU,OAC5BzK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,KAAA,SAAOsK,QAAQ,WAAUxK,SAAC,eAC1BE,EAAAA,EAAAA,KAAC2K,EAAAA,EAAW,CAAC3J,IAAKkE,EACdb,QAAShB,EAAMiB,KAAMpE,MAAOmD,EAAMnD,MAAOqE,SAAUlB,EAAMrC,IACzD4J,cAAe,SAACxK,GAAC,OAAKiD,EAAMlD,SAASC,EAAE,EACvCL,WAAWwK,EAAAA,EAAAA,IAAW,CAAE,YAAaF,EAAWG,UACnD/C,GAAoBpE,EAAMiB,QAC5B,OAGPtE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,yBAAwBD,UACvCE,EAAAA,EAAAA,KAACiK,EAAAA,GAAU,CACP3F,KAAK,UACLkC,QAASA,EACT0D,MAAO,CAAEC,SAAU,wBACnBC,OAAQ,SAAAS,GAAA,IAAGxH,EAAKwH,EAALxH,MAAOgH,EAAUQ,EAAVR,WAAU,OAC5BzK,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIE,EAAAA,EAAAA,KAAA,SAAOsK,QAAQ,UAASxK,SAAC,cACzBE,EAAAA,EAAAA,KAAC8K,EAAAA,EAAa,CAAC9J,IAAKmE,EAChBd,QAAShB,EAAMiB,KAAMpE,MAAOmD,EAAMnD,MAAOqE,SAAUlB,EAAMrC,IAAK+J,UAAU,OACxEhL,WAAWwK,EAAAA,EAAAA,IAAW,CAAE,YAAaF,EAAWG,QAChDrK,SAAU,SAACC,GAAC,OAAKiD,EAAMlD,SAASC,EAAEG,OAAOL,MAAM,EAAET,KAAM,EAAGuL,KAAM,KACnEvD,GAAoBpE,EAAMiB,QAC5B,iBASnC,C,uHCzUa2G,EAAiB,oBAAAA,KAAAC,EAAAA,EAAAA,GAAA,KAAAD,EAAA,CAkEzB,OAlEyBE,EAAAA,EAAAA,GAAAF,EAAA,EAAAG,IAAA,iBAAAlL,MAAA,eAAAmL,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAE1B,SAAAC,EAAqBzO,GAAS,IAAA4E,EAAArC,EAAA,OAAAgM,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGzB,OAFGjK,EAAU,CACV,SAAY,CAAE,SAAY2D,EAAAA,GAAeuG,IAAK,YAAe,CAAC,CAAE,OAAS,EAAM,UAAanG,EAAAA,GAAgBoG,WAC/GJ,EAAAE,KAAA,EAEgBG,KAAKC,aAAajP,EAAW4E,GAAQ,OACrC,OADbrC,EAAIoM,EAAAO,KACR/E,QAAQC,IAAI7H,GAAKoM,EAAAQ,OAAA,SACV5M,GAAI,wBAAAoM,EAAAS,OAAA,GAAAX,EAAA,UACd,gBAAAY,GAAA,OAAAhB,EAAAiB,MAAA,KAAAC,UAAA,EAVyB,IAUzB,CAAAnB,IAAA,UAAAlL,MAAA,eAAAsM,GAAAlB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAiB,EAAczP,EAAW2C,GAAE,IAAA+M,EAAAC,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OACa,OAAhCa,EAAM,SAAAG,OAAS7P,EAAS,KAAM2C,EAAEiN,EAAAf,KAAA,EACjBiB,EAAAA,GAAcC,IAAIL,EAAI,CACrCM,QAAS,KACTrN,GAAI+M,EACJO,MAAO,CACHC,IAAK,OAEV,KAAD,EACqB,OAPjBP,EAAIC,EAAAV,KAOV/E,QAAQC,IAAIuF,EAAKpN,MAAMqN,EAAAT,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAqN,EAAAR,OAAA,GAAAK,EAAA,KACnB,gBAAAU,EAAAC,GAAA,OAAAZ,EAAAF,MAAA,KAAAC,UAAA,EAbA,IAaA,CAAAnB,IAAA,eAAAlL,MAAA,eAAAmN,GAAA/B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA8B,EAAmBtQ,EAAW4E,GAAO,IAAA8K,EAAAC,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACwC,OAArEa,EAAM,iBAAAG,OAAiB7P,EAAS,YAAciK,KAAKC,UAAUtF,GAAQ2L,EAAA1B,KAAA,EACtDiB,EAAAA,GAAcC,IAAIL,EAAI,CACrCM,QAAS,KACTrN,GAAI+M,EACJO,MAAO,CACHC,IAAK,OAEV,KAAD,EACqB,OAPjBP,EAAIY,EAAArB,KAOV/E,QAAQC,IAAIuF,EAAKpN,MAAMgO,EAAApB,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAgO,EAAAnB,OAAA,GAAAkB,EAAA,KACnB,gBAAAE,EAAAC,GAAA,OAAAJ,EAAAf,MAAA,KAAAC,UAAA,EAbA,IAaA,CAAAnB,IAAA,SAAAlL,MAAA,eAAAwN,GAAApC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAmC,EAAa3Q,EAAWgK,GAAM,IAAA4G,EAAAlB,EAAA,OAAAnB,EAAAA,EAAAA,KAAAG,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OAEoB,OADxC+B,EAAc5G,EAAS8G,OAAOC,KAAK/G,GAAQ9D,KAAI,SAAA8K,GAAC,OAAIC,mBAAmBD,GAAK,IAAMC,mBAAmBjH,EAAOgH,GAAG,IAAEE,KAAK,KAAO,GAC/HxB,EAAM,SAAAG,OAAS7P,EAAS,KAAM4Q,EAAWC,EAAA1B,OAAA,SACtCW,EAAAA,GAAcC,IAAIL,EAAK,CAC1BM,QAAS,KACTrN,GAAI+M,EACJO,MAAO,CACHC,IAAK,OAEV5N,MAAK,SAAA6O,GAAG,OAAIA,EAAI5O,IAAI,KAAC,wBAAAsO,EAAAzB,OAAA,GAAAuB,EAAA,KAC3B,gBAAAS,EAAAC,GAAA,OAAAX,EAAApB,MAAA,KAAAC,UAAA,EAZA,IAYA,CAAAnB,IAAA,SAAAlL,MAAA,eAAAoO,GAAAhD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA+C,EAAavR,EAAWuC,GAAI,IAAAoN,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA3C,KAAA,EACLiB,EAAAA,GAAc2B,KAAK,SAAD5B,OAAU7P,GAAauC,GAAM,KAAD,EAC1C,OADjBoN,EAAI6B,EAAAtC,KACV/E,QAAQC,IAAIuF,EAAKpN,MAAMiP,EAAArC,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAiP,EAAApC,OAAA,GAAAmC,EAAA,KACnB,gBAAAG,EAAAC,GAAA,OAAAL,EAAAhC,MAAA,KAAAC,UAAA,EANA,IAMA,CAAAnB,IAAA,SAAAlL,MAAA,eAAA0O,GAAAtD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAqD,EAAa7R,EAAW2C,EAAIJ,GAAI,IAAAoN,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAAoD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,cAAAiD,EAAAjD,KAAA,EACTiB,EAAAA,GAAciC,IAAI,SAAAlC,OAAS7P,EAAS,KAAM2C,EAAIJ,GAAM,KAAD,EAC/C,OADjBoN,EAAImC,EAAA5C,KACV/E,QAAQC,IAAIuF,EAAKpN,MAAMuP,EAAA3C,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAuP,EAAA1C,OAAA,GAAAyC,EAAA,KACnB,gBAAAG,EAAAC,EAAAC,GAAA,OAAAN,EAAAtC,MAAA,KAAAC,UAAA,EANA,IAMA,CAAAnB,IAAA,SAAAlL,MAAA,eAAAiP,GAAA7D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA4D,EAAapS,EAAW2C,GAAE,IAAAgN,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAAxD,MAAA,cAAAwD,EAAAxD,KAAA,EACHiB,EAAAA,GAAcwC,OAAO,SAAAzC,OAAS7P,EAAS,KAAM2C,GAAI,KAAD,EAC5C,OADjBgN,EAAI0C,EAAAnD,KACV/E,QAAQC,IAAIuF,EAAKpN,MAAM8P,EAAAlD,OAAA,SAChBQ,EAAKpN,MAAI,wBAAA8P,EAAAjD,OAAA,GAAAgD,EAAA,KACnB,gBAAAG,EAAAC,GAAA,OAAAL,EAAA7C,MAAA,KAAAC,UAAA,EANA,MAMAtB,CAAA,CAlEyB,E,qJCGjB/L,EAAc,WAEvB,SAAAA,KAAcgM,EAAAA,EAAAA,GAAA,KAAAhM,GACV8M,KAAKyD,kBAAoB,IAAIxE,EAAAA,EAC7Be,KAAK7F,mBAAqB,IAAIC,EAAAA,CAClC,CAgFC,OAhFA+E,EAAAA,EAAAA,GAAAjM,EAAA,EAAAkM,IAAA,UAAAlL,MAAA,eAAAsM,GAAAlB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAC,EAAc9L,GAAE,IAAA+M,EAAAC,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACa,OAArBa,EAAG,aAAAG,OAAgBlN,GAAEgM,EAAAE,KAAA,EACNiB,EAAAA,GAAcC,IAAIL,EAAK,CACtCM,QAAS,KACTrN,GAAI+M,EACJO,MAAO,CACHC,IAAK,OAEV,KAAD,EACqB,OAPjBP,EAAIhB,EAAAO,KAOV/E,QAAQC,IAAIuF,EAAKpN,MAAMoM,EAAAQ,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAoM,EAAAS,OAAA,GAAAX,EAAA,KACnB,gBAAAY,GAAA,OAAAG,EAAAF,MAAA,KAAAC,UAAA,EAbA,IAaA,CAAAnB,IAAA,SAAAlL,MAAA,eAAAwN,GAAApC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAiB,EAAazF,GAAM,IAAA0I,EAAAC,EAAAhD,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OAUY,OAT3B1E,QAAQC,IAAIJ,GAOR0I,EAAQ1I,EAASA,EAAOvH,KAAO,IAC/BkQ,EAAS3I,EAASA,EAAO3E,MAAQ,EACrC8E,QAAQC,IAAIsI,EAAOC,GAAQ/C,EAAAf,KAAA,EACR+D,EAAAA,EAAgBC,eAAeH,EAAOC,GAAQ,KAAD,EAC9C,OADZhD,EAAIC,EAAAV,KACV/E,QAAQC,IAAIuF,GAAMC,EAAAT,OAAA,SACXQ,GAAI,wBAAAC,EAAAR,OAAA,GAAAK,EAAA,KACd,gBAAAU,GAAA,OAAAO,EAAApB,MAAA,KAAAC,UAAA,EAhBA,IAgBA,CAAAnB,IAAA,SAAAlL,MAAA,eAAAoO,GAAAhD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA8B,EAAa/N,GAAI,IAAAoN,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cAAA0B,EAAA1B,KAAA,EACMiB,EAAAA,GAAc2B,KAAK,YAAalP,GAAM,KAAD,EACjC,OADjBoN,EAAIY,EAAArB,KACV/E,QAAQC,IAAIuF,EAAKpN,MAAMgO,EAAApB,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAgO,EAAAnB,OAAA,GAAAkB,EAAA,KACnB,gBAAAF,GAAA,OAAAkB,EAAAhC,MAAA,KAAAC,UAAA,EANA,IAMA,CAAAnB,IAAA,SAAAlL,MAAA,eAAA0O,GAAAtD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAmC,EAAahO,EAAIJ,GAAI,IAAAoN,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,cAAAgC,EAAAhC,KAAA,EACEiB,EAAAA,GAAciC,IAAI,aAAepP,EAAIJ,GAAM,KAAD,EACtC,OADjBoN,EAAIkB,EAAA3B,KACV/E,QAAQC,IAAIuF,EAAKpN,MAAMsO,EAAA1B,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAsO,EAAAzB,OAAA,GAAAuB,EAAA,KACnB,gBAAAH,EAAAC,GAAA,OAAAmB,EAAAtC,MAAA,KAAAC,UAAA,EANA,IAMA,CAAAnB,IAAA,yBAAAlL,MAAA,eAAA4P,GAAAxE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA+C,EAA6B5O,GAAE,IAAAgN,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA3C,KAAA,EAQRiB,EAAAA,GAAcC,IAAI,aAAepN,EAAI,CACpDqN,QAAS,KACTrN,GAAI,aAAeA,EACnBsN,MAAO,CACHC,IAAK,OAEV,KAAD,EACqB,OAPjBP,EAAI6B,EAAAtC,KAOV/E,QAAQC,IAAIuF,EAAKpN,MAAMiP,EAAArC,OAAA,SAChBQ,EAAKpN,KAAKwQ,eAAa,wBAAAvB,EAAApC,OAAA,GAAAmC,EAAA,KACjC,gBAAAH,GAAA,OAAA0B,EAAAxD,MAAA,KAAAC,UAAA,EAnBA,IAmBA,CAAAnB,IAAA,oBAAAlL,MAAA,eAAA8P,GAAA1E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAqD,EAAwBlP,EAAIJ,GAAI,IAAAoN,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAAoD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,cAAAiD,EAAAjD,KAAA,EAITiB,EAAAA,GAAc2B,KAAK,mBAAqB9O,EAAIJ,GAAM,KAAD,EAC7C,OADjBoN,EAAImC,EAAA5C,KACV/E,QAAQC,IAAIuF,EAAKpN,MAAMuP,EAAA3C,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAuP,EAAA1C,OAAA,GAAAyC,EAAA,KACnB,gBAAAR,EAAAK,GAAA,OAAAsB,EAAA1D,MAAA,KAAAC,UAAA,EATA,IASA,CAAAnB,IAAA,8BAAAlL,MAAA,eAAA+P,GAAA3E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA4D,EAAkCc,EAAWC,GAAU,IAAAvO,EAAArC,EAAA,OAAAgM,EAAAA,EAAAA,KAAAG,MAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAAxD,MAAA,OAIlD,OAHGjK,EAAU,CACV,aAAgB,CAAE,SAAY2D,EAAAA,GAAeuG,IAAK,YAAe,CAAC,CAAE,MAASoE,EAAW,UAAavK,EAAAA,GAAgBoG,UACrH,cAAiB,CAAE,SAAYxG,EAAAA,GAAeuG,IAAK,YAAe,CAAC,CAAE,MAASqE,EAAY,UAAaxK,EAAAA,GAAgBoG,WAC1HsD,EAAAxD,KAAA,EAEgBG,KAAKyD,kBAAkBxD,aAAa,yBAA0BrK,GAAQ,OACtE,OADbrC,EAAI8P,EAAAnD,KACR/E,QAAQC,IAAI7H,GAAK8P,EAAAlD,OAAA,SACV5M,EAAK6Q,gBAAc,wBAAAf,EAAAjD,OAAA,GAAAgD,EAAA,UAC7B,gBAAAT,EAAAK,GAAA,OAAAiB,EAAA3D,MAAA,KAAAC,UAAA,EAXA,MAWArN,CAAA,CArFsB,E,6GCJdkH,EAAkB,oBAAAA,KAAA8E,EAAAA,EAAAA,GAAA,KAAA9E,EAAA,CAwF1B,OAxF0B+E,EAAAA,EAAAA,GAAA/E,EAAA,EAAAgF,IAAA,UAAAlL,MAAA,eAAAsM,GAAAlB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAE3B,SAAAC,EAAczO,EAAW2C,GAAE,IAAA+M,EAAAC,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACgB,OAAnCa,EAAM,YAAAG,OAAY7P,EAAS,KAAM2C,EAAEgM,EAAAE,KAAA,EACpBiB,EAAAA,GAAcC,IAAIL,EAAK,CACtCM,QAAS,KACTrN,GAAI+M,EACJO,MAAO,CACHC,IAAK,OAEV,KAAD,EACqB,OAPjBP,EAAIhB,EAAAO,KAOV/E,QAAQC,IAAIuF,EAAKpN,MAAMoM,EAAAQ,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAoM,EAAAS,OAAA,GAAAX,EAAA,KACnB,gBAAAY,EAAAc,GAAA,OAAAX,EAAAF,MAAA,KAAAC,UAAA,EAb0B,IAa1B,CAAAnB,IAAA,mBAAAlL,MAAA,eAAAmQ,GAAA/E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAiB,EAAuB6D,GAAS,IAAA5D,EAAAC,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OACE,OAA1Ba,EAAG,WAAAG,OAAcyD,GAAS1D,EAAAf,KAAA,EACXiB,EAAAA,GAAcC,IAAIL,EAAK,CACtCM,QAAS,KACTrN,GAAI+M,EACJO,MAAO,CACHC,IAAK,OAEV,KAAD,EACqB,OAPjBP,EAAIC,EAAAV,KAOV/E,QAAQC,IAAIuF,EAAKpN,MAAMqN,EAAAT,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAqN,EAAAR,OAAA,GAAAK,EAAA,KACnB,gBAAAW,GAAA,OAAAiD,EAAA/D,MAAA,KAAAC,UAAA,EAbA,IAaA,CAAAnB,IAAA,4BAAAlL,MAAA,eAAAqQ,GAAAjF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA8B,EAAgCgD,EAAWE,GAAO,IAAA9D,EAAAC,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACL,OAArCa,EAAG,WAAAG,OAAcyD,EAAS,KAAAzD,OAAI2D,GAAOjD,EAAA1B,KAAA,EACtBiB,EAAAA,GAAcC,IAAIL,EAAK,CACtCM,QAAS,KACTrN,GAAI+M,EACJO,MAAO,CACHC,IAAK,OAEV,KAAD,EACqB,OAPjBP,EAAIY,EAAArB,KAOV/E,QAAQC,IAAIuF,EAAKpN,MAAMgO,EAAApB,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAgO,EAAAnB,OAAA,GAAAkB,EAAA,KACnB,gBAAAE,EAAAC,GAAA,OAAA8C,EAAAjE,MAAA,KAAAC,UAAA,EAbA,IAaA,CAAAnB,IAAA,qBAAAlL,MAAA,eAAAuQ,GAAAnF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAmC,EAAyB6C,GAAO,IAAA9D,EAAAC,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OACM,OAA9Ba,EAAG,iBAAAG,OAAoB2D,GAAO3C,EAAAhC,KAAA,EACfiB,EAAAA,GAAcC,IAAIL,EAAK,CACtCM,QAAS,KACTrN,GAAI+M,EACJO,MAAO,CACHC,IAAK,OAEV,KAAD,EACqB,OAPjBP,EAAIkB,EAAA3B,KAOV/E,QAAQC,IAAIuF,EAAKpN,MAAMsO,EAAA1B,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAsO,EAAAzB,OAAA,GAAAuB,EAAA,KACnB,gBAAAS,GAAA,OAAAqC,EAAAnE,MAAA,KAAAC,UAAA,EAbA,IAaA,CAAAnB,IAAA,aAAAlL,MAAA,eAAAwQ,GAAApF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA+C,EAAiBoC,GAAO,IAAAhE,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,cAAA2C,EAAA3C,KAAA,EACDiB,EAAAA,GAAc2B,KAAK,6BAA8BkC,GAAS,KAAD,EACrD,OADjBhE,EAAI6B,EAAAtC,KACV/E,QAAQC,IAAIuF,EAAKpN,MAAMiP,EAAArC,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAiP,EAAApC,OAAA,GAAAmC,EAAA,KACnB,gBAAAF,GAAA,OAAAqC,EAAApE,MAAA,KAAAC,UAAA,EANA,IAMA,CAAAnB,IAAA,aAAAlL,MAAA,eAAA0Q,GAAAtF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAqD,EAAiB8B,GAAO,IAAAhE,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAAoD,GAAA,cAAAA,EAAAlD,KAAAkD,EAAAjD,MAAA,cAAAiD,EAAAjD,KAAA,EACDiB,EAAAA,GAAc2B,KAAK,6BAA8BkC,GAAS,KAAD,EACrD,OADjBhE,EAAImC,EAAA5C,KACV/E,QAAQC,IAAIuF,EAAKpN,MAAMuP,EAAA3C,OAAA,SAChBQ,EAAKpN,MAAI,wBAAAuP,EAAA1C,OAAA,GAAAyC,EAAA,KACnB,gBAAAH,GAAA,OAAAkC,EAAAtE,MAAA,KAAAC,UAAA,EANA,IAMA,CAAAnB,IAAA,gBAAAlL,MAAA,eAAA2Q,GAAAvF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA4D,EAAoB0B,EAAaH,GAAO,IAAAhE,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAAxD,MAAA,cAAAwD,EAAAxD,KAAA,EACjBiB,EAAAA,GAAc2B,KAAK,YAAD5B,OAAaiE,GAAeH,GAAS,KAAD,EAClD,OADjBhE,EAAI0C,EAAAnD,KACV/E,QAAQC,IAAIuF,EAAKpN,MAAM8P,EAAAlD,OAAA,SAChBQ,EAAKpN,MAAI,wBAAA8P,EAAAjD,OAAA,GAAAgD,EAAA,KACnB,gBAAAT,EAAAK,GAAA,OAAA6B,EAAAvE,MAAA,KAAAC,UAAA,EANA,IAMA,CAAAnB,IAAA,SAAAlL,MAAA,eAAAwN,GAAApC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAuF,EAAa/T,EAAWgK,GAAM,IAAA4G,EAAAlB,EAAA,OAAAnB,EAAAA,EAAAA,KAAAG,MAAA,SAAAsF,GAAA,cAAAA,EAAApF,KAAAoF,EAAAnF,MAAA,OAEuB,OAD3C+B,EAAc5G,EAAS8G,OAAOC,KAAK/G,GAAQ9D,KAAI,SAAA8K,GAAC,OAAIC,mBAAmBD,GAAK,IAAMC,mBAAmBjH,EAAOgH,GAAG,IAAEE,KAAK,KAAO,GAC/HxB,EAAM,YAAAG,OAAY7P,EAAS,KAAM4Q,EAAWoD,EAAA7E,OAAA,SACzCW,EAAAA,GAAcC,IAAIL,EAAK,CAC1BM,QAAS,KACTrN,GAAI+M,EACJO,MAAO,CACHC,IAAK,OAEV5N,MAAK,SAAA6O,GAAG,OAAIA,EAAI5O,IAAI,KAAC,wBAAAyR,EAAA5E,OAAA,GAAA2E,EAAA,KAC3B,gBAAA9B,EAAAC,GAAA,OAAAxB,EAAApB,MAAA,KAAAC,UAAA,EAZA,IAYA,CAAAnB,IAAA,qBAAAlL,MAAA,eAAA+Q,GAAA3F,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA0F,EAAyBC,EAAS5R,GAAI,IAAAoN,EAAA,OAAApB,EAAAA,EAAAA,KAAAG,MAAA,SAAA0F,GAAA,cAAAA,EAAAxF,KAAAwF,EAAAvF,MAAA,cAAAuF,EAAAvF,KAAA,EACfiB,EAAAA,GAAc2B,KAAK,gBAAD5B,OAAiBsE,GAAW5R,GAAM,KAAD,EAC/C,OADjBoN,EAAIyE,EAAAlF,KACV/E,QAAQC,IAAIuF,EAAKpN,MAAM6R,EAAAjF,OAAA,SAChBQ,EAAKpN,MAAI,wBAAA6R,EAAAhF,OAAA,GAAA8E,EAAA,KACnB,gBAAA3B,EAAAC,GAAA,OAAAyB,EAAA3E,MAAA,KAAAC,UAAA,EANA,MAMAnG,CAAA,CAxF0B,E","sources":["constants/models.js","constants/transactions.js","pages/components/SelectMasterDataTableOL.js","pages/components/SelectMasterDataOL.js","pages/transactional_data/stock/DamagedStock.js","services/MasterDataService.js","services/ProductService.js","services/TransactionService.js"],"sourcesContent":["export const BANK_MODEL = 'dtBank';\nexport const BANK_ACCOUNT_MODEL = 'dtBankAccount';\nexport const CASH_MODEL = 'dtCash';\nexport const CUSTOMER_MODEL = 'dtCustomer';\nexport const EMPLOYEE_MODEL = 'dtEmployee';\nexport const EMP_HISTORY_MODEL = 'dtEmploymentHistory';\nexport const PACKAGE_MODEL = 'dtPackageProduct';\nexport const PRODUCT_MODEL = 'dtProduct';\nexport const SUPPLIER_MODEL = 'dtSupplier';\nexport const WAREHOUSE_MODEL = 'dtWarehouse';\nexport const STOCK_MODEL = 'dtStock';\n\nexport const ATTENDANCE_MODEL = 'trxAttendance';\nexport const DAMAGED_STOCK_MODEL = 'trxDamagedStock';\nexport const STOCK_ADJUSTMENT_MODEL = 'trxStockAdjustment';\nexport const EXPENSE_MODEL = 'trxExpense';\nexport const EXTRA_INCOME_MODEL = 'trxExtraIncome';\nexport const INVOICE_MODEL = 'trxInvoice';\nexport const PURCHASE_MODEL = 'trxPurchase';\nexport const SALES_MODEL = 'trxSales';\nexport const STOCK_IN_MODEL = 'trxStockIn';\nexport const STOCK_OUT_MODEL = 'trxStockOut';\n\nexport const ACC_RECEIVABLE = 'trxACReceivable';\nexport const ACC_PAYABLE = 'trxACPayable';\nexport const BANK_REGISTER = 'trxBankRegister';\nexport const CASH_REGISTER = 'trxCashRegister';\nexport const EXTRA_INCOME_REGISTER = 'trxExtraIncomeRegister';\nexport const EXPENSE_REGISTER = 'trxExpenseRegister';\nexport const PYAMENT_REGISTER = 'trxPayment';\n\nexport const CUSTOMER_CATEGORY_MODEL = 'dtCustomerCategory';\nexport const DEPARTMENT_MODEL = 'dtDepartment';\nexport const DESIGNATION_MODEL = 'dtDesignation';\nexport const EXPENSE_TYPE_MODEL = 'dtExpenseType';\nexport const EXTRA_INCOME_TYPE_MODEL = 'dtExtraIncomeType';\nexport const GRADE_MODEL = 'dtGrade';\nexport const GROUP_MODEL = 'dtGroup';\nexport const PRODBRAND_MODEL = 'dtProductBrand';\nexport const PRODMODEL_MODEL = 'dtProductModel';\nexport const OFFICE_TIME_MODEL = 'dtOfficeTime';\nexport const PAYMENT_TYPE_MODEL = 'dtPaymentType';\nexport const PRODUCT_CATEGORY_MODEL = 'dtProductCategory';\nexport const ROUTE_MODEL = 'dtRoute';\nexport const SUPPLIER_CATEGORY_MODEL = 'dtSupplierCategory';\n","export const ON_ADD_PRODUCT = 'onAddProduct';\nexport const ON_UPDATE_PRODUCT = 'onUpdateProduct';\nexport const ON_ADD_PACKAGE_PRODUCT = 'onAddPackageProduct';\nexport const ON_STOCK_IN_PACKAGE_PRODUCT = 'onStockInPackageProduct';\nexport const ON_UPDATE_PACKAGE_PRODUCT = 'onUpdatePackageProduct';\nexport const ON_PURCHASE_PRODUCT = 'onPurchaseProduct';\nexport const ON_UPDATE_PURCHASE_PRODUCT = 'onPurchaseUpdate';\nexport const ON_PURCHASE_RETURN = 'onPurchaseReturn';\nexport const ON_SALES_PRODUCT = 'onSalesProduct';\nexport const ON_SALES_RETURN = 'onSalesReturn';\nexport const ON_CANCEL_SALES_ORDER = 'onCancelSalesOrder';\nexport const ON_CONFIRM_SALES_ORDER = 'onConfirmSalesOrder';\nexport const ON_UPDATE_SALES_PRODUCT = 'onSalesUpdate';\nexport const ON_EXPENSE_FROM_CASH = 'onExpenseFromCash';\nexport const ON_EXPENSE_FROM_BANK = 'onExpenseFromBank';\nexport const ON_EXTRA_INCOME_TO_CASH = 'onExtraIncomeToCash';\nexport const ON_EXTRA_INCOME_TO_BANK = 'onExtraIncomeToBank';\nexport const ON_CASH_TO_BANK = 'onCashToBank';\nexport const ON_BANK_TO_CASH = 'onBankToCash';\nexport const ON_DAMAGED_STOCK = 'onDamagedStock';\nexport const ON_STOCK_ADJUSTMENT = 'onStockAdjustment';\n","import React, { useState, useRef, useEffect } from 'react';\nimport { DataTable } from 'primereact/datatable';\nimport { Column } from 'primereact/column';\nimport { OverlayPanel } from 'primereact/overlaypanel';\nimport { InputText } from 'primereact/inputtext';\nimport { ProductService } from '../../services/ProductService';\n\nexport default function SelectMasterDataTableOL({ defaultFilters, fieldValue, onSelect, modelName, columns, showFields=[], caption=\"Select\", dialogHeight='70vh', dialogWidth='80vw'}) {\n\n    const dt = useRef(null);\n    const op = useRef(null);\n\n    const [loading, setLoading] = useState(false);\n    const [globalFilterValue, setGlobalFilterValue] = useState('');\n    const [totalRecords, setTotalRecords] = useState(0);\n    const [lazyParams, setLazyParams] = useState(defaultFilters);\n    const [tmpData, setTmpData] = useState([]);\n    const [selectedRow, setSelectedRow] = useState({});\n\n    const productService = new ProductService();\n\n    const loadLazyData = () => {\n        setLoading(true);\n\n        productService.getAll(lazyParams).then(data => {\n        // productService.getAll({ params: JSON.stringify(lazyParams) }).then(data => {\n            setTotalRecords(data.total);\n            setTmpData(data.rows);\n            setLoading(false);\n        });\n    }\n\n    useEffect(() => {\n        initFilters();\n    }, []);\n\n    useEffect(() => {\n        loadLazyData();\n    }, [lazyParams]);\n\n    const initFilters = () => {\n        setLazyParams(defaultFilters);\n        setGlobalFilterValue('');\n    };\n\n    const onPage = (event) => {\n        let _lazyParams = { ...lazyParams, ...event };\n        setLazyParams(_lazyParams);\n    }\n\n    const onSort = (event) => {\n        let _lazyParams = { ...lazyParams, ...event };\n        setLazyParams(_lazyParams);\n    }\n\n    const onFilter = (event) => {\n        let _lazyParams = { ...lazyParams, ...event };\n        _lazyParams['first'] = 0;\n        setLazyParams(_lazyParams);\n    }\n\n    const onGlobalFilterChange = (e) => {\n        let _lazyParams = { ...lazyParams };\n\n        const value = e.target.value;\n        \n        setGlobalFilterValue(value);\n\n        if(value === null || value === undefined) {\n            return;\n        }\n\n        _lazyParams['filters']['global'].value = value;\n        _lazyParams['first'] = 0;\n        setLazyParams(_lazyParams);\n    };\n\n    const onSelection = (e) => {\n        op.current.hide();\n        setGlobalFilterValue('');\n        onSelect(e)\n    }\n\n    const isSelectable = (data) => data.id !== fieldValue;\n\n    const isRowSelectable = (event) => (event.data ? isSelectable(event.data) : true);\n\n    const rowClassName = (data) => (isSelectable(data) ? '' : 'p-disabled');\n\n    return (\n        <>\n            <span className=\"p-input-icon-left\">\n                <i className=\"pi pi-search\" />\n                <InputText value={globalFilterValue} onChange={onGlobalFilterChange} \n                    onClick={(e) => {op.current.show(e)}}\n                    onFocus={(e) => {e.target.select()}}\n                    placeholder=\"Search\" />\n            </span>\n            <OverlayPanel ref={op} showCloseIcon>\n                <DataTable\n                    ref={dt} value={tmpData} dataKey=\"id\"\n                    className=\"datatable-responsive\" responsiveLayout=\"scroll\"\n                    lazy loading={loading} rows={lazyParams.rows}\n                    onSort={onSort} sortField={lazyParams.sortField} sortOrder={lazyParams.sortOrder}\n                    onFilter={onFilter} filterDisplay=\"row\"\n                    filters={lazyParams.filters}\n                    isDataSelectable={isRowSelectable} rowClassName={rowClassName}\n                    scrollable scrollHeight=\"flex\" tableStyle={{ minWidth: '50rem' }}\n                    paginator totalRecords={totalRecords} onPage={onPage} first={lazyParams.first}\n                    paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\" \n                    rowsPerPageOptions={[5,10, 15]}\n                    currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\n                    globalFilterFields={['name']}\n                    selectionMode=\"single\" selection={selectedRow}\n                    onSelectionChange={(e) => {onSelection(e)}}\n                    emptyMessage=\"No data found.\"\n                >\n                    <Column selectionMode=\"single\" headerStyle={{ minWidth: '3rem' }}></Column>\n                    {columns.map((col, index) => {\n                        return (\n                            <Column key={index} field={col.field} header={col.header} filter filterPlaceholder={col.filterPlaceholder} sortable headerStyle={{ width: col.width }}></Column>\n                        )\n                    })}\n                </DataTable>\n            </OverlayPanel>\n        </>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport SelectMasterDataTableOL from './SelectMasterDataTableOL';\n\nimport { ProductService } from '../../services/ProductService';\n\n\nexport default function SelectMasterDataOL({ field, displayField, showFields=[], defaultFilters, modelName, className, columns, caption=\"Select\", onSelect }) {\n\n    const productService = new ProductService();\n\n    const [selectedRow, setSelectedRow] = useState('');\n    const [trigger, setTrigger] = useState(0);\n\n    useEffect(() => {\n        if(field.value==null || field.value==\"\") {\n            setSelectedRow(\"\");\n            return;\n        }\n        productService.getById(field.value).then(data => {\n            setSelectedRow(data[displayField]);\n        });\n    }, [field.value]);\n\n    const onSelection = (e) => {\n        setSelectedRow(e.value[displayField]);\n        field.onChange(e.value.id);\n        onSelect(e.value)\n    }\n\n    return (\n        <>\n            <InputText readonly=\"true\" value={selectedRow} placeholder={caption}  \n                className={className} \n                onClick={() => setTrigger((trigger) => trigger + 1)} \n                />\n            <InputText hidden inputId={field.name} value={field.value} inputRef={field.ref} />\n            <SelectMasterDataTableOL displayField={displayField} trigger={trigger}\n                fieldName={field.name} fieldValue={field.value} fieldRef={field.ref}\n                defaultFilters={defaultFilters}\n                modelName={modelName} caption={caption}\n                className={className} columns={columns} showFields={showFields}\n                onSelect={onSelection}/>\n        </>\n    );\n}","import * as moment from 'moment';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useForm, Controller, set } from 'react-hook-form';\nimport { FilterMatchMode, FilterOperator } from 'primereact/api';\nimport { Button } from 'primereact/button';\nimport { classNames } from 'primereact/utils';\nimport { Column } from 'primereact/column';\nimport { Dialog } from 'primereact/dialog';\nimport { DataTable } from 'primereact/datatable';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { InputNumber } from 'primereact/inputnumber';\nimport { Toast } from 'primereact/toast';\nimport { Toolbar } from 'primereact/toolbar';\n\nimport SelectMasterDataOL from '../../components/SelectMasterDataOL';\n\nimport { TransactionService } from '../../../services/TransactionService';\nimport { PRODUCT_MODEL, DAMAGED_STOCK_MODEL } from '../../../constants/models';\nimport { ON_DAMAGED_STOCK } from '../../../constants/transactions';\n\nconst DamagedStock = () => {\n\n    const modelName = DAMAGED_STOCK_MODEL;\n\n    let defaultValue = {\n        date: Date.now(),\n        dtProduct_id: null,\n        quantity: 0,\n        details: '',\n    };\n\n    const toast = useRef(null);\n    const dt = useRef(null);\n    const quantityRef = useRef(null);\n    const detailsRef = useRef(null);\n\n    let defaultFilters = {\n        fields: [],\n        first: 0,\n        rows: 10,\n        page: 1,\n        sortField: null,\n        sortOrder: null,\n        filters: {\n            'name': { operator: FilterOperator.OR, constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }] },            \n        }\n    };\n\n    const [loading, setLoading] = useState(false);\n    const [totalRecords, setTotalRecords] = useState(0);\n    const [dtDamagedStock, setDamagedStock] = useState(null);\n    const [lazyParams, setLazyParams] = useState(defaultFilters);\n    const [showForm, setShowForm] = useState(false);\n    const [submitted, setSubmitted] = useState(false);\n\n    const transactionService = new TransactionService();\n\n    const {\n        register,\n        control,\n        formState: { errors },\n        resetField,\n        handleSubmit\n    } = useForm({\n        defaultValues: defaultValue\n    });\n\n    useEffect(() => {\n        initFilters();\n    }, []);\n    \n    const clearFilter = () => {\n        initFilters();\n    }\n\n    const initFilters = () => {\n        setLazyParams(defaultFilters);\n    }\n\n    useEffect(() => {\n        loadLazyData();\n    }, [lazyParams]);\n\n    const loadLazyData = () => {\n        setLoading(true);\n\n        transactionService.getAll(modelName, { params: JSON.stringify(lazyParams) }).then(data => {\n            console.log(data)\n            setTotalRecords(data.total);\n            setDamagedStock(data.rows);\n            setLoading(false);\n        });\n    }\n\n    const exportCSV = () => {\n        dt.current.exportCSV();\n    };\n    const onPage = (event) => {\n        let _lazyParams = { ...lazyParams, ...event };\n        setLazyParams(_lazyParams);\n    }\n    const onSort = (event) => {\n        let _lazyParams = { ...lazyParams, ...event };\n        setLazyParams(_lazyParams);\n    }\n\n    const onFilter = (event) => {\n        let _lazyParams = { ...lazyParams, ...event };\n        _lazyParams['first'] = 0;\n        setLazyParams(_lazyParams);\n    }\n\n    const onProductSelect = (selectedRow) => {\n        console.log(\"PRODUCT SELECTED::\", selectedRow)\n        // select quantity from stock\n        quantityRef.current.focus();\n    };\n\n    const nameBodyTemplate = (rowData) => {\n        return (\n            <>\n                {rowData.name}\n            </>\n        );\n    };\n\n    // reset all form fields\n    const resetForm = () => {\n        resetField('dtProduct_id');\n        resetField('quantity');\n        resetField('details');\n        setSubmitted(false);\n    };\n\n    // show Add form\n    const openNew = () => {\n        resetForm();\n        setShowForm(true);\n    };\n\n    const addDamagedStock = (formData) => {\n        setSubmitted(true);\n        if (quantityRef.current.value < 1) {\n            return;\n        }\n        let _data = {\n            dtProduct_id: formData.dtProduct_id,\n            quantity: formData.quantity,\n            details: formData.details,\n        };\n        console.log(_data);\n        transactionService.processTransaction(ON_DAMAGED_STOCK, _data).then(response => {\n            console.log(response);\n            if (response.success) {\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Damaged Stock Added', life: 3000 });\n                resetForm();\n                setShowForm(false);\n                loadLazyData();\n            } else {\n                toast.current.show({ severity: 'error', summary: 'Error', detail: response.message, life: 3000 });\n            }\n        });\n    };\n\n    const leftToolbarTemplate = () => {\n        return (\n            <React.Fragment>\n                <Button onClick={() => openNew()} className=\"p-button p-button-primary mr-2\" label=\"Add Damaged Stock\" />\n            </React.Fragment>\n        );\n    };\n\n    const rightToolbarTemplate = () => {\n        return (\n            <React.Fragment>\n                <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />\n            </React.Fragment>\n        );\n    };\n\n    const renderHeader = () => {\n        return (\n            <div className=\"flex justify-content-between\">\n                <h5 className=\"m-0\">Damaged Stock</h5>\n                <Button type=\"button\" icon=\"pi pi-filter-slash\" label=\"Refresh\" className=\"p-button-outlined\" onClick={clearFilter} />\n            </div>\n        )\n    }\n\n    const getDate = (date) => {\n        return moment(parseInt(date)).format('DD/MM/YYYY hh:mm:ss');\n    }\n\n    const dateBodyTemplate = (rowData) => {\n        return (\n            <>\n                {getDate(rowData.date)}\n            </>\n        );\n    };\n\n    const quantityBodyTemplate = (rowData) => {\n        return (\n            <>\n                {rowData.quantity}\n            </>\n        );\n    };\n\n    const detailsBodyTemplate = (rowData) => {\n        return (\n            <>\n                {rowData.details}\n            </>\n        );\n    };\n    const transferByBodyTemplate = (rowData) => {\n        return (\n            <>\n                {rowData.transferBy}\n            </>\n        );\n    };\n\n    const getFormErrorMessage = (name) => {\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\n    };\n\n    const hideForm = () => {\n        setShowForm(false);\n    };\n\n    const footerDialog = (\n        <>\n            <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideForm} />\n            <Button disabled={submitted} label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={handleSubmit((d) => addDamagedStock(d))} />\n        </>\n    );\n\n    return (\n        <div className=\"grid crud-demo\">\n            <div className=\"col-12\">\n                <div className=\"card\">\n                    <Toast ref={toast} />\n                    <Toolbar className=\"mb-4\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\n\n                    <DataTable\n                        ref={dt} value={dtDamagedStock} dataKey=\"_id\" \n                        className=\"datatable-responsive\" responsiveLayout=\"scroll\"\n                        lazy loading={loading} rows={lazyParams.rows}\n                        onSort={onSort} sortField={lazyParams.sortField} sortOrder={lazyParams.sortOrder}\n                        onFilter={onFilter} filters={lazyParams.filters} filterDisplay=\"menu\"\n                        scrollable columnResizeMode=\"expand\" resizableColumns showGridlines\n                        paginator totalRecords={totalRecords} onPage={onPage} first={lazyParams.first}\n                        paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\" \n                        rowsPerPageOptions={[5,10,25,50]}\n                        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\n                        emptyMessage=\"No data found.\" header={renderHeader} \n                    >\n                        <Column field=\"date\" header=\"Transaction Datetime\" filter filterPlaceholder=\"Search by name\" sortable body={dateBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>                        \n                        <Column field=\"dtProduct_id\" header=\"Product Name\" filter filterPlaceholder=\"Search by name\" sortable body={nameBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>                        \n                        <Column field=\"quantity\" header=\"Quantity\" filter filterPlaceholder=\"Search by name\" sortable body={quantityBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>                        \n                        <Column field=\"details\" header=\"Details\" filter filterPlaceholder=\"Search by name\" sortable body={detailsBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>                        \n                        <Column field=\"transferBy\" header=\"Transfer by\" filter filterPlaceholder=\"Search by name\" sortable body={transferByBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>                        \n                    </DataTable>\n\n                    <Dialog visible={showForm} style={{ width: '450px' }} header={`Add Damaged Stock`} modal className=\"p-fluid\" footer={footerDialog} onHide={hideForm}>                    \n                        <div className=\"p-fluid formgrid grid\">\n                            <div className=\"field col-12 md:col-6\">\n                            <Controller\n                                name=\"dtProduct_id\"\n                                control={control}\n                                rules={{ required: 'Product is required.' }}\n                                    render={({ field, fieldState }) => (\n                                    <>\n                                        <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Product*</label>\n                                        <SelectMasterDataOL field={field} modelName={PRODUCT_MODEL}\n                                            displayField=\"name\"\n                                            className={classNames({ 'p-invalid': fieldState.error })} \n                                            onSelect={onProductSelect}\n                                            defaultFilters={defaultFilters}\n                                            columns={[\n                                                {field: 'name', header: 'Product Name', filterPlaceholder: 'Filter by Product Name', width: '50rem'}, \n                                                {field: 'brandName', header: 'Brand Name', filterPlaceholder: 'Filter by Barnd Name', width: '15rem'},\n                                                {field: 'modelNo', header: 'Model No', filterPlaceholder: 'Filter by Model No', width: '15rem'},\n                                                {field: 'partNumber', header: 'Part Number', filterPlaceholder: 'Filter by Part Number', width: '15rem'},\n                                                {field: 'dtProductCategory_id_shortname', header: 'Product Category', filterPlaceholder: 'Filter by Product Category', width: '15rem'}\n                                            ]} />\n                                        {getFormErrorMessage(field.name)}\n                                    </>\n                                )}/>                            \n                            </div>\n                            <div className=\"field col-12 md:col-6\">\n                            <Controller\n                                name=\"quantity\"\n                                control={control}\n                                rules={{\n                                    validate: (value) => (value > 0) || 'Quantity greater than 0 is required'\n                                }}\n                                render={({ field, fieldState }) => (\n                                <>\n                                    <label htmlFor=\"quantity\">Quantity*</label>\n                                    <InputNumber ref={quantityRef}\n                                        inputId={field.name} value={field.value} inputRef={field.ref} \n                                        onValueChange={(e) => field.onChange(e)} \n                                        className={classNames({ 'p-invalid': fieldState.error })} />\n                                    {getFormErrorMessage(field.name)}\n                                </>\n                            )}/>\n                            </div>                            \n                            <div className=\"field col-12 md:col-12\">\n                            <Controller\n                                name=\"details\"\n                                control={control}\n                                rules={{ required: 'Details is required.' }}\n                                render={({ field, fieldState }) => (\n                                <>\n                                    <label htmlFor=\"details\">Details*</label>\n                                    <InputTextarea ref={detailsRef}\n                                        inputId={field.name} value={field.value} inputRef={field.ref} keyfilter=\"text\" \n                                        className={classNames({ 'p-invalid': fieldState.error })} \n                                        onChange={(e) => field.onChange(e.target.value)} rows={3} cols={20} />\n                                    {getFormErrorMessage(field.name)}\n                                </>\n                            )}/>\n                            </div>\n                        </div>\n                    </Dialog>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DamagedStock;","import axiosInstance from \"./AxiosService\";\nimport { FilterMatchMode, FilterOperator } from 'primereact/api';\n\nexport class MasterDataService {\n\n    async getDefaultItem(modelName) {\n        let filters = {\n            '_default': { \"operator\": FilterOperator.AND, \"constraints\": [{ \"value\": true, \"matchMode\": FilterMatchMode.EQUALS }] },\n        }\n\n        let data = await this.getByFilters(modelName, filters)\n        console.log(data)\n        return data\n    }\n\n    async getById(modelName, id) {\n        let uri = `/data/${modelName}/` + id;\n        const resp = await axiosInstance.get(uri,{\n            timeout: 15000,\n            id: uri,\n            cache: {\n                ttl: 1000 * 20 // 60 seconds.\n            }\n        });\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async getByFilters(modelName, filters) {\n        let uri = `/dataByParams/${modelName}?params=`  + JSON.stringify(filters);\n        const resp = await axiosInstance.get(uri,{\n            timeout: 15000,\n            id: uri,\n            cache: {\n                ttl: 1000 * 20 // 60 seconds.\n            }\n        });\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async getAll(modelName, params) {\n        const queryParams = params ? Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&') : '';\n        let uri = `/data/${modelName}?` + queryParams;\n        return axiosInstance.get(uri, {\n            timeout: 15000,\n            id: uri,\n            cache: {\n                ttl: 1000 * 20 // 60 seconds.\n            }\n        }).then(res => res.data);\n    }\n\n    async create(modelName, data) {\n        const resp = await axiosInstance.post(`/data/${modelName}`, data);\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async update(modelName, id, data) {\n        const resp = await axiosInstance.put(`/data/${modelName}/` + id, data);\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async delete(modelName, id) {\n        const resp = await axiosInstance.delete(`/data/${modelName}/` + id);\n        console.log(resp.data);\n        return resp.data;\n    }\n}","import axiosInstance from \"./AxiosService\";\nimport { FilterMatchMode, FilterOperator } from 'primereact/api';\nimport { MasterDataService } from './MasterDataService';\nimport { TransactionService } from './TransactionService';\nimport RProductService from './RProductService';\n\nexport class ProductService {\n\n    constructor() {\n        this.masterDataService = new MasterDataService();\n        this.transactionService = new TransactionService();\n    }\n\n    async getById(id) {\n        let uri = `/products/${id}`;\n        const resp = await axiosInstance.get(uri, {\n            timeout: 15000,\n            id: uri,\n            cache: {\n                ttl: 1000 * 20 // 20 seconds.\n            }\n        });\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async getAll(params) {\n        console.log(params);\n        // params = { params: JSON.stringify(params) };\n\n        // const queryParams = params ? Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&') : '';\n\n        // return axiosInstance.get(`/products?` + queryParams).then(res => res.data);\n\n        let limit = params ? params.rows : 1000;\n        let offset = params ? params.first : 0;\n        console.log(limit, offset);\n        const resp = await RProductService.getAllProducts(limit, offset);\n        console.log(resp);\n        return resp;\n    }\n\n    async create(data) {\n        const resp = await axiosInstance.post(`/products`, data);\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async update(id, data) {\n        const resp = await axiosInstance.put(`/products/` + id, data);\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async getProductCurrentStock(id) {\n        // let filters = {\n        //     'dtProduct_id': { \"operator\": FilterOperator.AND, \"constraints\": [{ \"value\": id, \"matchMode\": FilterMatchMode.EQUALS }] },\n        // }\n\n        // let data = await this.masterDataService.getByFilters(\"dtStock\", filters)\n        // console.log(data)\n        // return data.currentStock\n        const resp = await axiosInstance.get(`/products/` + id, {\n            timeout: 15000,\n            id: `/products/` + id,\n            cache: {\n                ttl: 1000 * 20 // 20 seconds.\n            }\n        });\n        console.log(resp.data);\n        return resp.data.current_stock;\n    }\n\n    async addPackageToStock(id, data) {\n        // let res = await this.transactionService.processTransaction(ON_STOCK_IN_PACKAGE_PRODUCT, data)\n        // console.log(res)\n        // return res\n        const resp = await axiosInstance.post(`/products/stock/` + id, data);\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async getProductCustomerLastPrice(productId, customerId) {\n        let filters = {\n            'dtProduct_id': { \"operator\": FilterOperator.AND, \"constraints\": [{ \"value\": productId, \"matchMode\": FilterMatchMode.EQUALS }] },\n            'dtCustomer_id': { \"operator\": FilterOperator.AND, \"constraints\": [{ \"value\": customerId, \"matchMode\": FilterMatchMode.EQUALS }] },\n        }\n\n        let data = await this.masterDataService.getByFilters(\"dtProductSalesCustomer\", filters)\n        console.log(data)\n        return data.lastTradePrice\n    }\n}","import axiosInstance from \"./AxiosService\";\n\nexport class TransactionService {\n\n    async getById(modelName, id) {\n        let uri = `/trxdata/${modelName}/` + id;\n        const resp = await axiosInstance.get(uri, {\n            timeout: 15000,\n            id: uri,\n            cache: {\n                ttl: 1000 * 20 // 20 seconds.\n            }\n        });\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async getLedgerByParty(partyType) {\n        let uri = `/ledger/${partyType}`;\n        const resp = await axiosInstance.get(uri, {\n            timeout: 15000,\n            id: uri,\n            cache: {\n                ttl: 1000 * 20 // 20 seconds.\n            }\n        });\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async getLedgerByPartyTypeAndId(partyType, partyId) {\n        let uri = `/ledger/${partyType}/${partyId}`;\n        const resp = await axiosInstance.get(uri, {\n            timeout: 15000,\n            id: uri,\n            cache: {\n                ttl: 1000 * 20 // 20 seconds.\n            }\n        });\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async getLedgerByPartyId(partyId) {\n        let uri = `/ledger_by_id/${partyId}`;\n        const resp = await axiosInstance.get(uri, {\n            timeout: 15000,\n            id: uri,\n            cache: {\n                ttl: 1000 * 20 // 20 seconds.\n            }\n        });\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async bankToCash(payment) {\n        const resp = await axiosInstance.post(`/bank_cash/trxCashRegister`, payment);\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async cashToBank(payment) {\n        const resp = await axiosInstance.post(`/bank_cash/trxBankRegister`, payment);\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async commitPayment(paymentType, payment) {\n        const resp = await axiosInstance.post(`/payment/${paymentType}`, payment);\n        console.log(resp.data);\n        return resp.data;\n    }\n\n    async getAll(modelName, params) {\n        const queryParams = params ? Object.keys(params).map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k])).join('&') : '';\n        let uri = `/trxdata/${modelName}?` + queryParams;\n        return axiosInstance.get(uri, {\n            timeout: 15000,\n            id: uri,\n            cache: {\n                ttl: 1000 * 20 // 20 seconds.\n            }\n        }).then(res => res.data);\n    }\n\n    async processTransaction(trxName, data) {\n        const resp = await axiosInstance.post(`/transaction/${trxName}`, data);\n        console.log(resp.data);\n        return resp.data;\n    }\n    \n}"],"names":["BANK_MODEL","BANK_ACCOUNT_MODEL","CASH_MODEL","CUSTOMER_MODEL","EMPLOYEE_MODEL","EMP_HISTORY_MODEL","PRODUCT_MODEL","SUPPLIER_MODEL","WAREHOUSE_MODEL","STOCK_MODEL","DAMAGED_STOCK_MODEL","STOCK_ADJUSTMENT_MODEL","EXPENSE_MODEL","EXTRA_INCOME_MODEL","PURCHASE_MODEL","SALES_MODEL","STOCK_IN_MODEL","STOCK_OUT_MODEL","ACC_RECEIVABLE","ACC_PAYABLE","BANK_REGISTER","CASH_REGISTER","PYAMENT_REGISTER","CUSTOMER_CATEGORY_MODEL","DEPARTMENT_MODEL","DESIGNATION_MODEL","EXPENSE_TYPE_MODEL","EXTRA_INCOME_TYPE_MODEL","GRADE_MODEL","GROUP_MODEL","PRODBRAND_MODEL","PRODMODEL_MODEL","OFFICE_TIME_MODEL","PAYMENT_TYPE_MODEL","PRODUCT_CATEGORY_MODEL","ROUTE_MODEL","SUPPLIER_CATEGORY_MODEL","ON_EXPENSE_FROM_CASH","ON_EXPENSE_FROM_BANK","ON_EXTRA_INCOME_TO_CASH","ON_EXTRA_INCOME_TO_BANK","ON_DAMAGED_STOCK","ON_STOCK_ADJUSTMENT","SelectMasterDataTableOL","_ref","defaultFilters","fieldValue","onSelect","columns","modelName","dt","showFields","caption","dialogHeight","dialogWidth","useRef","op","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","globalFilterValue","setGlobalFilterValue","_useState5","_useState6","totalRecords","setTotalRecords","_useState7","_useState8","lazyParams","setLazyParams","_useState9","_useState10","tmpData","setTmpData","_useState11","_useState12","selectedRow","productService","ProductService","useEffect","initFilters","getAll","then","data","total","rows","isSelectable","id","_jsxs","_Fragment","children","className","_jsx","InputText","value","onChange","e","_lazyParams","_objectSpread","target","undefined","onClick","current","show","onFocus","select","placeholder","OverlayPanel","ref","showCloseIcon","DataTable","dataKey","responsiveLayout","lazy","onSort","event","sortField","sortOrder","onFilter","filterDisplay","filters","isDataSelectable","rowClassName","scrollable","scrollHeight","tableStyle","minWidth","paginator","onPage","first","paginatorTemplate","rowsPerPageOptions","currentPageReportTemplate","globalFilterFields","selectionMode","selection","onSelectionChange","hide","onSelection","emptyMessage","Column","headerStyle","map","col","index","field","header","filter","filterPlaceholder","sortable","width","SelectMasterDataOL","displayField","_ref$showFields","_ref$caption","setSelectedRow","trigger","setTrigger","getById","readonly","hidden","inputId","name","inputRef","fieldName","fieldRef","defaultValue","date","Date","now","dtProduct_id","quantity","details","toast","quantityRef","detailsRef","fields","page","operator","FilterOperator","OR","constraints","matchMode","FilterMatchMode","STARTS_WITH","dtDamagedStock","setDamagedStock","showForm","setShowForm","submitted","setSubmitted","transactionService","TransactionService","_useForm","useForm","defaultValues","control","register","errors","formState","resetField","handleSubmit","clearFilter","loadLazyData","params","JSON","stringify","console","log","exportCSV","onProductSelect","focus","resetForm","getFormErrorMessage","message","hideForm","footerDialog","Button","label","icon","disabled","d","formData","_data","processTransaction","response","success","severity","summary","detail","life","addDamagedStock","Toast","Toolbar","left","React","right","columnResizeMode","resizableColumns","showGridlines","type","body","rowData","moment","parseInt","format","transferBy","Dialog","visible","style","modal","footer","onHide","Controller","rules","required","render","fieldState","htmlFor","classNames","error","validate","_ref2","InputNumber","onValueChange","_ref3","InputTextarea","keyfilter","cols","MasterDataService","_classCallCheck","_createClass","key","_getDefaultItem","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","AND","EQUALS","this","getByFilters","sent","abrupt","stop","_x","apply","arguments","_getById","_callee2","uri","resp","_context2","concat","axiosInstance","get","timeout","cache","ttl","_x2","_x3","_getByFilters","_callee3","_context3","_x4","_x5","_getAll","_callee4","queryParams","_context4","Object","keys","k","encodeURIComponent","join","res","_x6","_x7","_create","_callee5","_context5","post","_x8","_x9","_update","_callee6","_context6","put","_x10","_x11","_x12","_delete2","_callee7","_context7","delete","_x13","_x14","masterDataService","limit","offset","RProductService","getAllProducts","_getProductCurrentStock","current_stock","_addPackageToStock","_getProductCustomerLastPrice","productId","customerId","lastTradePrice","_getLedgerByParty","partyType","_getLedgerByPartyTypeAndId","partyId","_getLedgerByPartyId","_bankToCash","payment","_cashToBank","_commitPayment","paymentType","_callee8","_context8","_processTransaction","_callee9","trxName","_context9"],"sourceRoot":""}
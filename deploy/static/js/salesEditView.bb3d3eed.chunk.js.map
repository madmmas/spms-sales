{"version":3,"file":"static/js/salesEditView.bb3d3eed.chunk.js","mappings":"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","sources":["pages/transactional_data/sales/components/PaymentDialog.js","pages/transactional_data/sales/Edit.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { InputText } from 'primereact/inputtext';\nimport { InputNumber } from 'primereact/inputnumber';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { Button } from 'primereact/button';\nimport { classNames } from 'primereact/utils';\nimport { Dialog } from 'primereact/dialog';\nimport { Calendar } from 'primereact/calendar';\n\nimport SelectConstData from '../../../components/SelectConstData';\nimport SelectMasterData from '../../../components/SelectMasterData';\n\nimport { PAYMENT_TYPES } from '../../../../constants/lookupData';\nimport { BANK_ACCOUNT_MODEL } from '../../../../constants/models';\n\nconst Form = ( { customerCategory, trigger, netAmount, onPaymnetSubmit }) => {\n\n    let emptyPayment = {\n        dtPaymentType_id: 'CASH',\n        dtBankAccount_id: null,\n        paymentDate: Date.now(),\n        paidAmount: 0,\n        dueAmount: 0,\n        paymentRef: \"\",\n        paymentRemarks: '',\n    };\n\n    const [submitted, setSubmitted] = useState(false);\n    const [paymentDialog, setPaymentDialog] = useState(false);\n    const [bankCash, setBankCash] = useState(\"CASH\");\n\n    const {\n        register,\n        control,\n        formState: { errors },\n        resetField,\n        setValue,\n        handleSubmit\n    } = useForm({\n        defaultValues: emptyPayment\n    });\n\n    useEffect(() => {\n        if (trigger) {\n            showDialog();\n            if (customerCategory === \"WALKIN\") {\n                setValue('dueAmount', 0);\n                setValue('paidAmount', netAmount);\n            } else {\n                setValue('dueAmount', netAmount);\n                setValue('paidAmount', 0);    \n            }\n        }\n    }, [trigger]);\n\n    const showDialog = () => {\n        setPaymentDialog(true);\n    };\n\n    const getFormErrorMessage = (name) => {\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\n    };\n\n    const hideSalesPaymentDialog = () => {\n        setPaymentDialog(false);\n    };\n\n    const onInputChange = (e) => {\n        const val = (e.target && e.target.value) || 0;\n        const dueAmount = netAmount - val;\n        setValue('dueAmount', dueAmount);\n        setValue('paidAmount', val);\n    };\n\n    const paymentDialogFooter = (\n        <>\n            <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideSalesPaymentDialog} />\n            <Button disabled={submitted} label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" \n                onClick={\n                    handleSubmit((d) => onPaymnetSubmit(d))\n                }\n            />\n        </>\n    );\n\n    return (\n        <Dialog visible={paymentDialog} style={{ width: '450px' }} header={`Payment`} modal className=\"p-fluid\" footer={paymentDialogFooter} onHide={hideSalesPaymentDialog}>                    \n            <div className=\"p-fluid formgrid grid\">\n                <div className=\"field col-12 md:col-12\">\n                    <Controller\n                        name=\"dtPaymentType_id\"\n                        control={control}\n                        rules={{ required: 'Payment Type is required.' }}\n                        render={({ field, fieldState }) => (\n                        <>\n                            <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Payment Method</label>\n                            <SelectConstData field={field} data={PAYMENT_TYPES}\n                                onSelectChange={(value) => {console.log(value); setBankCash(value)}}\n                                className={classNames({ 'p-invalid': fieldState.error })} /> \n                            {getFormErrorMessage(field.name)}\n                        </>\n                    )}/>\n                </div>\n                <div hidden={bankCash !== \"BANK\"} className=\"field col-12 md:col-12\">\n                <Controller\n                    name=\"dtBankAccount_id\"\n                    control={control}\n                    rules={{ \n                        validate: (value) => ((bankCash === \"CASH\") || (bankCash === \"BANK\" && value !== null) ) || 'Bank Account is required.'\n                    }}\n                    render={({ field, fieldState }) => (\n                    <>\n                        <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Bank Name*</label>\n                        <SelectMasterData field={field} modelName={BANK_ACCOUNT_MODEL}\n                            displayField=\"accName\" showFields={[\"dtBank_id\", \"accNumber\", \"accName\"]}\n                            onSelect={(e) => {console.log(e);}}\n                            className={classNames({ 'p-invalid': fieldState.error })} \n                            columns={[\n                                {field: 'dtBank_id_shortname', header: 'Bank Name', filterPlaceholder: 'Filter by Bank Name'}, \n                                {field: 'accNumber', header: 'Account Number', filterPlaceholder: 'Filter by Account Number'},\n                                {field: 'accName', header: 'Account Name', filterPlaceholder: 'Filter by Account Name'}\n                            ]} />\n                        {getFormErrorMessage(field.name)}\n                    </>\n                )}/>\n                </div>\n                <div className=\"field col-12 md:col-12\">\n                <Controller\n                    name=\"dueAmount\"\n                    control={control}\n                    rules={{\n                        validate: (value) => (value > 0) || 'Enter a valid amount.'\n                    }}\n                    render={({ field, fieldState }) => (\n                    <>\n                        <label htmlFor=\"dueAmount\">Due Amount*</label>\n                        <InputNumber readOnly={true} inputId={field.name} value={field.value} inputRef={field.payRef} \n                            onValueChange={(e) => field.onChange(e)} \n                            className={classNames({ 'p-invalid': fieldState.error })} />\n                        {getFormErrorMessage(field.name)}\n                    </>\n                )}/>\n                </div>                            \n                <div className=\"field col-12 md:col-12\">\n                <Controller\n                    name=\"paidAmount\"\n                    control={control}\n                    rules={{\n                        validate: (value) => (value > 0) || 'Enter a valid amount.'\n                    }}\n                    render={({ field, fieldState }) => (\n                    <>\n                        <label htmlFor=\"paidAmount\">Pay Amount*</label>\n                        <InputNumber inputId={field.name} value={field.value} inputRef={field.payRef} \n                            readOnly={customerCategory === \"WALKIN\"}\n                            // onValueChange={(e) => field.onChange(e)} \n                            onValueChange={(e) => onInputChange(e)}\n                            className={classNames({ 'p-invalid': fieldState.error })} />\n                        {getFormErrorMessage(field.name)}\n                    </>\n                )}/>\n                </div>                            \n                <div className=\"field col-12 md:col-12\">\n                <Controller\n                    name=\"paymentRef\"\n                    control={control}\n                    render={({ field, fieldState }) => (\n                    <>\n                        <label htmlFor=\"payRef\">Reference</label>\n                        <InputText inputId={field.name} value={field.value} inputRef={field.payRef} keyfilter=\"text\" \n                            className={classNames({ 'p-invalid': fieldState.error })} \n                            onChange={(e) => field.onChange(e.target.value)} rows={3} cols={20} />\n                        {getFormErrorMessage(field.name)}\n                    </>\n                )}/>\n                </div>\n                <div className=\"field col-12 md:col-12\">\n                <Controller\n                    name=\"paymentRemarks\"\n                    control={control}\n                    render={({ field, fieldState }) => (\n                    <>\n                        <label htmlFor=\"payRemarks\">Remarks*</label>\n                        <InputTextarea inputId={field.name} value={field.value} inputRef={field.payRef} keyfilter=\"text\" \n                            className={classNames({ 'p-invalid': fieldState.error })} \n                            onChange={(e) => field.onChange(e.target.value)} rows={3} cols={20} />\n                        {getFormErrorMessage(field.name)}\n                    </>\n                )}/>\n                </div>\n            </div>\n        </Dialog>\n    );\n}\n                     \nexport default Form;","import React, { useRef, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useForm, Controller } from 'react-hook-form';\nimport { InputText } from 'primereact/inputtext';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { FilterMatchMode } from 'primereact/api';\nimport { Button } from 'primereact/button';\nimport { Toast } from 'primereact/toast';\nimport { classNames } from 'primereact/utils';\nimport { Dialog } from 'primereact/dialog';\n\nimport PaymentDialog from './components/PaymentDialog';\nimport SelectConstData from '../../components/SelectConstData';\nimport SelectMasterDataTableList from '../../components/SelectMasterDataTableList';\nimport SelectMasterData from '../../components/SelectMasterData';\n\nimport { CUSTOMER_CATEGORY } from '../../../constants/lookupData';\nimport { ON_SALES_PRODUCT } from '../../../constants/transactions';\nimport { PRODUCT_MODEL, CUSTOMER_MODEL, SALES_MODEL } from '../../../constants/models';\n\nimport { TransactionService } from '../../../services/TransactionService';\n\nimport SalesProductForm from './components/SalesProductForm';\nimport SalesProductDetail from './components/SalesProductDetail';\nimport SalesProductTotal from './components/SalesProductTotal';\nimport { ConfigurationService } from '../../../services/ConfigurationService';\n\nconst Form = ({ sales }) => {\n\n    let navigate = useNavigate();\n\n    let defaultFormValues = {\n        notes: '',\n        dtCustomer_id: '',\n        customerCategory: 'WALKIN',\n        customerMobileNumber: '',\n        customerName: '',\n    };\n\n    let defaultSalesProduct = {\n        _id: null,\n        dtProduct_id: \"\",\n        barCode: \"\",\n        lastSalePrice: 0.00,\n\n        unitTradePrice: 0.00,\n        quantity: 1,  \n        totalPrice: 0.00,\n        discount: 0.00,\n        discountedAmount: 0.00,\n        netPrice: 0.00,\n\n        remarks: \"\",\n    };\n\n    const toast = useRef(null);\n\n    const [totalPrice, setTotalPrice] = useState(0.00);\n    const [totalDiscount, setTotalDiscount] = useState(0.00);\n    const [totalDiscountedAmount, setTotalDiscountedAmount] = useState(0.00);\n    const [totalQuantity, setTotalQuantity] = useState(0);\n    const [vat, setVat] = useState(0.00);\n    const [deliveryCost, setDeliveryCost] = useState(0.00);\n    const [vatPercentage, setVatPercentage] = useState(0.00);\n    const [netAmount, setNetAmount] = useState(0.00);\n\n    const [salesItems, setSalesItems] = useState([]);\n    const [selectedItem, setSelectedItem] = useState({});\n    const [salesFormData, setSalesFormData] = useState({});\n    const [selectedTableItem, setSelectedTableItem] = useState({});\n    const [selectedProduct, setSelectedProduct] = useState(defaultSalesProduct);\n    const [deleteProductDialog, setDeleteSalesProductDialog] = useState(false);\n    const [selectedCustomer, setSelectedCustomer] = useState(null);\n    const [selectedCustomer_currency] = useState(\"INR\");\n    const [customerCategory, setCustomerCategory] = useState(\"WALKIN\");\n    const [updateSaleItemMode, setUpdateSaleItemMode] = useState(false);\n    const [trigger, setTrigger] = useState(0);\n    const [trxNo, setTrxNo] = useState('XXXXX');\n\n    const transactionService = new TransactionService();\n    const configurationService = new ConfigurationService();\n\n    const {\n        control,\n        formState: { errors },\n        reset,\n        setValue,\n        handleSubmit\n    } = useForm({\n        defaultValues: defaultFormValues\n    });\n\n    useEffect(() => {\n        // configurationService.getNextId(SALES_MODEL).then(data => {\n        //     setTrxNo(data.nextID);\n        // });\n        if(sales) {\n            setValue('dtCustomer_id', sales.dtCustomer_id||'');\n            setValue('notes', sales.notes||'');\n            setValue('customerMobileNumber', sales.customerMobileNumber||'');\n            setValue('customerName', sales.customerName||'');\n\n            setSalesItems(sales.salesItems||[]);\n        }\n    }, []);\n\n    const onSubmit = (formData) => {\n        if(salesItems.length === 0) {\n            toast.current.show({ severity: 'error', summary: 'Error', detail: 'No Product Added', life: 3000 });\n            return;\n        }\n\n        if(customerCategory !== \"CONDITIONAL\") {\n            setSalesFormData(formData);\n            setTrigger((trigger) => trigger + 1);\n            return;\n        }\n\n        saveData(formData, {});\n    };\n\n    const onPaymnetSubmit = (paymentData) => {\n        let formData = salesFormData;\n\n        saveData(formData, paymentData);\n    };\n\n    const saveData = (formData, paymentData) => {\n        formData.invoiceDate = Date.now();\n        formData.entryTime = Date.now();\n        formData.servedBy = \"ADMIN\";\n        formData.voucherNo = trxNo;\n        formData.customerCategory = customerCategory;\n\n        if(customerCategory === \"WALKIN\") {\n            formData.dtCustomer_id = null;\n            formData.customerMobileNumber = formData.customerMobileNumber;\n            formData.customerName = formData.customerName;\n            formData.customerAddress = '';\n            formData.salesStatus = \"COMPLETED\";\n        } else {\n            console.log(\"selectedCustomer::\", selectedCustomer);\n            formData.dtCustomer_id = selectedCustomer._id;\n            formData.customerMobileNumber = selectedCustomer.phone;\n            formData.customerName = selectedCustomer.name;\n            formData.customerAddress = selectedCustomer.address;\n            if(paymentData.dueAmount === 0.00) {\n                formData.salesStatus = \"COMPLETED\";\n            } else {\n                formData.salesStatus = \"PENDING\";\n            }\n        }\n\n        formData.items = salesItems;\n\n        formData.totalQuantity = totalQuantity;\n        formData.totalPrice = totalPrice;\n        formData.totalDiscount = totalDiscount;\n        formData.totalDiscountedAmount = totalDiscountedAmount;\n        formData.deliveryCost = 0.00;\n        formData.vat = vat;\n        formData.netAmount = netAmount;\n        formData.payment = paymentData;\n        formData.dueAmount = paymentData.dueAmount;\n        formData.isPaid = paymentData.dueAmount === 0.00;\n\n        // need to add balance forword here\n        formData.balanceForward = 0.00;\n        formData.netBalance = formData.balanceForward + formData.dueAmount;\n        // need to save this balance as well in the transaction\n\n        try {\n            transactionService.processTransaction(ON_SALES_PRODUCT, formData).then(data => {\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Sale Record Created', life: 3000 });\n                navigate(\"/sales/\" + data.ID);\n            });\n        }\n        catch (err){\n            toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Sale Record Created', life: 3000 });\n            navigate(\"/sales\");\n        }\n    };\n\n    const gotoList = () => {\n        navigate(\"/sales\");\n    };\n\n    const getFormErrorMessage = (name) => {\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\n    };\n\n    const addToSaleList = (addedItem) => {\n        let newSales = [...salesItems];\n        addedItem['index'] = salesItems.length;\n        newSales.push(addedItem);\n        setSalesItems(newSales);\n        calculateTotals(newSales);\n        clearProductSelection();\n    };\n\n    const updateSalelist = (dtSalesProduct) => {\n        let newSales = [...salesItems];\n        newSales[selectedProduct.index] = dtSalesProduct;\n        setSalesItems(newSales);\n        calculateTotals(newSales);\n        clearProductSelection();\n    };\n\n    const onVATChange = (vatPercentage) => {\n        setVatPercentage(vatPercentage);\n        let newSales = [...salesItems];\n        calculateTotals(newSales);\n    };\n\n    const onDeliveryCostChange = (deliveryCost) => {\n        setDeliveryCost(deliveryCost);\n        let newSales = [...salesItems];\n        calculateTotals(newSales);\n    };\n\n    const clearProductSelection = () => {\n        setSelectedProduct(defaultSalesProduct);\n        setSelectedItem({});\n        setSelectedTableItem({});\n        setUpdateSaleItemMode(false);\n    };\n\n    const clearAll = () => {\n        setSalesItems([]);\n        setTotalPrice(0.00);\n        setTotalDiscount(0.00);\n        setTotalQuantity(0);\n        setVat(0.00);\n        setDeliveryCost(0.00);\n        setVatPercentage(0.00);\n        setNetAmount(0.00);\n        setCustomerCategory(\"WALKIN\");\n        setSelectedCustomer({});\n        reset(defaultFormValues);\n    };\n\n    const removeItem = () => {\n        let newSales = [...salesItems];\n        newSales.splice(selectedProduct.index, 1);\n        setSalesItems(newSales);\n        setDeleteSalesProductDialog(false);\n    };\n\n    const calculateTotals = (allsales) => {\n        let total = 0.00;\n        let discount = 0.00;\n        let discountedAmount = 0.00;\n        let quantity = 0;\n        let vat = 0.00;\n        let netAmount = 0.00;\n        allsales.forEach(sale => {\n            total += sale.totalPrice;\n            discount += sale.discount;\n            discountedAmount += sale.discountedAmount;\n            quantity += sale.quantity;\n        });\n        vat = (total - discountedAmount) * (vatPercentage / 100);\n        netAmount = total - discountedAmount + vat + deliveryCost;\n        setTotalPrice(total);\n        setTotalDiscount(discount);\n        setTotalDiscountedAmount(discountedAmount);\n        setTotalQuantity(quantity);\n        setVat(vat);\n        setNetAmount(netAmount);\n    };\n\n    const editSalesProduct = (dtSalesProduct) => {\n        console.log(dtSalesProduct);\n        setSelectedProduct(dtSalesProduct);\n        setSelectedTableItem({ \"_id\": dtSalesProduct.dtProduct_id });\n        setUpdateSaleItemMode(true);\n    };\n\n    const onCustomerSelect = (selectedRow) => {\n        setSelectedCustomer(selectedRow);\n    };\n\n    const onCustomerCategoryChange = (value) => {\n        setCustomerCategory(value);\n        if(value === \"WALKIN\") {\n            setSelectedCustomer({});\n            setValue('dtCustomer_id', '');\n            setValue('notes', '');\n            setValue('customerMobileNumber', '');\n            setValue('customerName', '');\n        }\n    };\n\n    const onSelection = async (e) => {\n        let productSelected = e.value;\n        console.log(\"selectedCustomer::\", selectedCustomer);\n        if(selectedCustomer!==null || customerCategory===\"WALKIN\") {\n            if(updateSaleItemMode) {\n                toast.current.show({ severity: 'warn', summary: 'Please Cancel the update', detail: 'Product in update', life: 3000 });\n                return;\n            }\n\n            let alreadySelected = false;\n            salesItems.forEach(sale => {\n                if(sale.dtProduct_id === productSelected._id) {\n                    alreadySelected = true;\n                }\n            });\n            if(alreadySelected) {\n                toast.current.show({ severity: 'warn', summary: 'Already Added', detail: 'Product Already Added', life: 3000 });\n                setSelectedTableItem({});\n                setSelectedItem({});\n                setSelectedProduct(defaultSalesProduct);\n                return;\n            }\n\n            let lastTradePrice = 0\n            if(selectedCustomer!==null){\n                // crash here\n                // lastTradePrice = await productService.getProductCustomerLastPrice(productSelected._id, selectedCustomer);\n            }\n            productSelected['lastTradePrice'] = lastTradePrice;\n\n            setSelectedTableItem({ \"_id\": productSelected._id });\n            setSelectedItem(productSelected);\n        } else {\n            toast.current.show({ severity: 'warn', summary: 'Please Select Customer', detail: 'Select a Customer First', life: 3000 });\n        }\n    }\n\n    let defaultFilters = {\n        first: 0,\n        rows: 10,\n        page: 1,\n        sortField: null,\n        sortOrder: null,\n        filters: {\n            global: { value: null, matchMode: FilterMatchMode.CONTAINS },\n            name: { value: null, matchMode: FilterMatchMode.CONTAINS },\n            brandName: { value: null, matchMode: FilterMatchMode.CONTAINS },\n            modelNo: { value: null, matchMode: FilterMatchMode.CONTAINS },\n            partNumber: { value: null, matchMode: FilterMatchMode.CONTAINS }\n        }\n    }\n\n    const confirmDeleteSalesProduct = (dtSalesProduct) => {\n        setDeleteSalesProductDialog(true);\n    };\n\n    const hideDeleteSalesProductDialog = () => {\n        setDeleteSalesProductDialog(false);\n    };\n\n    const deleteProductDialogFooter = (\n        <>\n            <Button label=\"No\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideDeleteSalesProductDialog} />\n            <Button label=\"Yes\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={removeItem} />\n        </>\n    );\n\n    return (\n\n    <div className=\"grid h-screen\">    \n    <Toast ref={toast} />    \n    <div className=\"card col-5\">\n        <h5>Sale Detail :: VoucherNo ({trxNo}) </h5>\n        <div className=\"card col-12 md:col-12\">\n        <SelectMasterDataTableList displayField=\"name\"\n                fieldValue=\"\"\n                scrollHeight=\"300px\"\n                defaultFilters={defaultFilters}\n                modelName={PRODUCT_MODEL} caption=\"Select Product\"\n                selectedItem={selectedTableItem}\n                showFields={[]} onSelect={onSelection}\n                columns={[\n                    {field: 'name', header: 'Product Name', filterPlaceholder: 'Filter by Product Name', minWidth: '20rem'}, \n                    {field: 'brandName', header: 'Brand Name', filterPlaceholder: 'Filter by Barnd Name', minWidth: '10rem'},\n                    {field: 'modelNo', header: 'Model No', filterPlaceholder: 'Filter by Model No', minWidth: '10rem'},\n                    {field: 'partNumber', header: 'Part Number', filterPlaceholder: 'Filter by Part Number', minWidth: '10rem'},\n                    {field: 'dtProductCategory_id_shortname', header: 'Product Category', filterPlaceholder: 'Filter by Product Category', minWidth: '10rem'}\n                ]} \n                />\n        </div>\n        <div className=\"card col-12 md:col-12\">\n            <div className=\"p-fluid formgrid grid\">\n                <div className=\"field col-12 md:col-4\">\n                <Controller\n                    name=\"customerCategory\"\n                    control={control}\n                    render={({ field, fieldState }) => (\n                    <>\n                        <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Customer Category</label>\n                        <SelectConstData field={field} data={CUSTOMER_CATEGORY}\n                            onSelectChange={(value) => onCustomerCategoryChange(value)}\n                            className={classNames({ 'p-invalid': fieldState.error })} /> \n                        {getFormErrorMessage(field.name)}\n                    </>\n                )}/>\n                </div>\n                <div className=\"field col-12 md:col-8\">\n                <Controller\n                    name=\"notes\"\n                    control={control}\n                    render={({ field, fieldState }) => (\n                        <>\n                    <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Notes</label>\n                    <InputTextarea inputId={field.name} value={field.value} inputRef={field.ref}  onChange={(e) => field.onChange(e.target.value)} />\n                        </>\n                    )}/>\n                </div>\n\n                <div className=\"field col-12 md:col-2\">\n                    <Button type=\"submit\" label=\"Cancel Order\" className=\"p-button-outlined p-button-warning\" \n                        onClick={() => clearAll()}\n                    />\n                </div>\n                <div className=\"field col-12 md:col-2\">\n                    <Button type=\"submit\" label=\"Submit Order\" className=\"p-button p-button-success\" \n                        onClick={handleSubmit((d) => onSubmit(d))}\n                    />\n                </div>\n                {(customerCategory === \"WALKIN\") && (<div className=\"grid col-12 md:col-8\">\n                <div className=\"field col-12 md:col-6\">\n                <Controller\n                    name=\"customerMobileNumber\"\n                    control={control}\n                    rules={{ required: 'Mobile Number is required.' }}\n                    render={({ field, fieldState }) => (\n                        <>\n                    <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Mobile Number</label>\n                    <InputText inputId={field.name} value={field.value} inputRef={field.ref}  onChange={(e) => field.onChange(e.target.value)} />\n                    {getFormErrorMessage(field.name)}\n                        </>\n                    )}/>\n                </div>\n                <div className=\"field col-12 md:col-6\">\n                <Controller\n                    name=\"customerName\"\n                    control={control}\n                    render={({ field, fieldState }) => (\n                        <>\n                    <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Name</label>\n                    <InputText inputId={field.name} value={field.value} inputRef={field.ref}  onChange={(e) => field.onChange(e.target.value)} className={classNames({ 'p-invalid': fieldState.error })}/>\n                        </>\n                    )}/>\n                </div>\n                </div>)}\n                {(customerCategory !== \"WALKIN\") && (<div className=\"grid col-12 md:col-8\">\n                <div className=\"field col-12 md:col-8\">\n                <Controller\n                    name=\"dtCustomer_id\"\n                    control={control}\n                    rules={{ required: 'Custmer is required.' }}\n                    render={({ field, fieldState }) => (\n                    <>\n                        <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Customer*</label>\n                        <SelectMasterData field={field} modelName={CUSTOMER_MODEL}\n                            displayField=\"name\"\n                            onSelect={onCustomerSelect}\n                            className={classNames({ 'p-invalid': fieldState.error })} \n                            columns={[\n                                {field: 'name', header: 'Customer Name', filterPlaceholder: 'Filter by Customer Name'}\n                            ]} />\n                        {getFormErrorMessage(field.name)}\n                    </>\n                )}/>\n                </div>\n                <div className=\"field col-12 md:col-4\">\n                    <label>Last Voucher</label>\n                    <InputText  readOnly={true}/>\n                </div>\n                </div>)}\n            </div>\n        </div>\n    </div>\n    <div className=\"card col-7\" >\n        <SalesProductForm \n            onAdd={(dt) => addToSaleList(dt)} \n            onEdit={(dt) => updateSalelist(dt)}\n            onCancel={() => clearProductSelection()}\n            currency={selectedCustomer_currency} \n            defaultSalesProduct={defaultSalesProduct} \n            selectedItem={selectedItem}\n            selectedProduct={selectedProduct}\n            />\n        <SalesProductTotal sales={salesItems}\n                totalPrice={totalPrice} netAmount={netAmount} \n                totalDiscount={totalDiscountedAmount} \n                vat={vat} onVATChange={onVATChange}\n                onDeliveryCostChange={onDeliveryCostChange}\n                onEdit={(dt) => editSalesProduct(dt)} \n                onDelete={(dt) => confirmDeleteSalesProduct(dt)}\n            />\n        <SalesProductDetail sales={salesItems}\n                totalPrice={totalPrice} netAmount={netAmount} \n                totalDiscount={totalDiscountedAmount} \n                vat={vat} onVATChange={onVATChange}\n                onDeliveryCostChange={onDeliveryCostChange}\n                onEdit={(dt) => editSalesProduct(dt)} \n                onDelete={(dt) => confirmDeleteSalesProduct(dt)}\n            />\n        <Dialog visible={deleteProductDialog} style={{ width: '450px' }} header=\"Confirm\" modal footer={deleteProductDialogFooter} onHide={hideDeleteSalesProductDialog}>\n            <div className=\"flex align-items-center justify-content-center\">\n                <i className=\"pi pi-exclamation-triangle mr-3\" style={{ fontSize: '2rem' }} />\n                <span>\n                    Are you sure you want to delete?\n                </span>\n            </div>\n        </Dialog>\n        <PaymentDialog \n            customerCategory={customerCategory}\n            netAmount={netAmount} onPaymnetSubmit={(dt) => onPaymnetSubmit(dt)}\n            trigger={trigger} style={{ width: '450px' }} header=\"Payment\" \n            />\n    </div>     \n    </div>\n    );\n}\n                 \nexport default Form;"],"names":["_ref","customerCategory","trigger","netAmount","onPaymnetSubmit","emptyPayment","dtPaymentType_id","dtBankAccount_id","paymentDate","Date","now","paidAmount","dueAmount","paymentRef","paymentRemarks","_useState","useState","_useState2","_slicedToArray","submitted","_useState3","_useState4","paymentDialog","setPaymentDialog","_useState5","_useState6","bankCash","setBankCash","_useForm","useForm","defaultValues","control","register","errors","formState","setValue","resetField","handleSubmit","useEffect","showDialog","getFormErrorMessage","name","_jsx","className","children","message","hideSalesPaymentDialog","paymentDialogFooter","_jsxs","_Fragment","Button","label","icon","onClick","disabled","d","Dialog","visible","style","width","header","modal","footer","onHide","Controller","rules","required","render","_ref2","field","fieldState","htmlFor","classNames","value","SelectConstData","data","PAYMENT_TYPES","onSelectChange","console","log","error","hidden","validate","_ref3","SelectMasterData","modelName","BANK_ACCOUNT_MODEL","displayField","showFields","onSelect","e","columns","filterPlaceholder","_ref4","InputNumber","readOnly","inputId","inputRef","payRef","onValueChange","onChange","_ref5","val","target","onInputChange","_ref6","InputText","keyfilter","rows","cols","_ref7","InputTextarea","sales","navigate","useNavigate","defaultFormValues","notes","dtCustomer_id","customerMobileNumber","customerName","defaultSalesProduct","_id","dtProduct_id","barCode","lastSalePrice","unitTradePrice","quantity","totalPrice","discount","discountedAmount","netPrice","remarks","toast","useRef","setTotalPrice","totalDiscount","setTotalDiscount","totalDiscountedAmount","setTotalDiscountedAmount","_useState7","_useState8","totalQuantity","setTotalQuantity","_useState9","_useState10","vat","setVat","_useState11","_useState12","deliveryCost","setDeliveryCost","_useState13","_useState14","vatPercentage","setVatPercentage","_useState15","_useState16","setNetAmount","_useState17","_useState18","salesItems","setSalesItems","_useState19","_useState20","selectedItem","setSelectedItem","_useState21","_useState22","salesFormData","setSalesFormData","_useState23","_useState24","selectedTableItem","setSelectedTableItem","_useState25","_useState26","selectedProduct","setSelectedProduct","_useState27","_useState28","deleteProductDialog","setDeleteSalesProductDialog","_useState29","_useState30","selectedCustomer","setSelectedCustomer","_useState31","selectedCustomer_currency","_useState33","_useState34","setCustomerCategory","_useState35","_useState36","updateSaleItemMode","setUpdateSaleItemMode","_useState37","_useState38","setTrigger","_useState39","_useState40","trxNo","transactionService","TransactionService","ConfigurationService","reset","saveData","formData","paymentData","invoiceDate","entryTime","servedBy","voucherNo","customerAddress","salesStatus","phone","address","items","payment","isPaid","balanceForward","netBalance","processTransaction","ON_SALES_PRODUCT","then","current","show","severity","summary","detail","life","ID","err","onVATChange","newSales","_toConsumableArray","calculateTotals","onDeliveryCostChange","clearProductSelection","allsales","total","forEach","sale","editSalesProduct","dtSalesProduct","onCustomerSelect","selectedRow","onSelection","_asyncToGenerator","_regeneratorRuntime","mark","_callee","productSelected","alreadySelected","wrap","_context","prev","next","abrupt","stop","_x","apply","arguments","defaultFilters","first","page","sortField","sortOrder","filters","global","matchMode","FilterMatchMode","brandName","modelNo","partNumber","confirmDeleteSalesProduct","hideDeleteSalesProductDialog","deleteProductDialogFooter","splice","index","Toast","ref","SelectMasterDataTableList","fieldValue","scrollHeight","PRODUCT_MODEL","caption","minWidth","CUSTOMER_CATEGORY","onCustomerCategoryChange","type","length","onSubmit","CUSTOMER_MODEL","SalesProductForm","onAdd","dt","addedItem","push","addToSaleList","onEdit","updateSalelist","onCancel","currency","SalesProductTotal","onDelete","SalesProductDetail","fontSize","PaymentDialog"],"sourceRoot":""}
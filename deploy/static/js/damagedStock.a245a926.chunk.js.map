{"version":3,"file":"static/js/damagedStock.a245a926.chunk.js","mappings":"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","sources":["constants/models.js","pages/transactional_data/stock/DamagedStock.js"],"sourcesContent":["export const BANK_MODEL = 'dtBank';\nexport const BANK_ACCOUNT_MODEL = 'dtBankAccount';\nexport const CASH_MODEL = 'dtCash';\nexport const CUSTOMER_MODEL = 'dtCustomer';\nexport const EMPLOYEE_MODEL = 'dtEmployee';\nexport const EMP_HISTORY_MODEL = 'dtEmploymentHistory';\nexport const PACKAGE_MODEL = 'dtPackageProduct';\nexport const PRODUCT_MODEL = 'dtProduct';\nexport const SUPPLIER_MODEL = 'dtSupplier';\nexport const WAREHOUSE_MODEL = 'dtWarehouse';\nexport const STOCK_MODEL = 'dtStock';\n\nexport const ATTENDANCE_MODEL = 'trxAttendance';\nexport const DAMAGED_STOCK_MODEL = 'trxDamagedStock';\nexport const STOCK_ADJUSTMENT_MODEL = 'trxStockAdjustment';\nexport const EXPENSE_MODEL = 'trxExpense';\nexport const EXTRA_INCOME_MODEL = 'trxExtraIncome';\nexport const INVOICE_MODEL = 'trxInvoice';\nexport const PURCHASE_MODEL = 'trxPurchase';\nexport const SALES_MODEL = 'trxSales';\nexport const STOCK_IN_MODEL = 'trxStockIn';\nexport const STOCK_OUT_MODEL = 'trxStockOut';\n\nexport const ACC_RECIEVABLE = 'trxACRecievable';\nexport const ACC_PAYABLE = 'trxACPayable';\nexport const BANK_REGISTER = 'trxBankRegister';\nexport const CASH_REGISTER = 'trxCashRegister';\nexport const EXTRA_INCOME_REGISTER = 'trxExtraIncomeRegister';\nexport const EXPENSE_REGISTER = 'trxExpenseRegister';\nexport const PYAMENT_REGISTER = 'trxPayment';\n\nexport const CUSTOMER_CATEGORY_MODEL = 'dtCustomerCategory';\nexport const DEPARTMENT_MODEL = 'dtDepartment';\nexport const DESIGNATION_MODEL = 'dtDesignation';\nexport const EXPENSE_TYPE_MODEL = 'dtExpenseType';\nexport const EXTRA_INCOME_TYPE_MODEL = 'dtExtraIncomeType';\nexport const GRADE_MODEL = 'dtGrade';\nexport const GROUP_MODEL = 'dtGroup';\nexport const OFFICE_TIME_MODEL = 'dtOfficeTime';\nexport const PAYMENT_TYPE_MODEL = 'dtPaymentType';\nexport const PRODUCT_CATEGORY_MODEL = 'dtProductCategory';\nexport const ROUTE_MODEL = 'dtRoute';\nexport const SUPPLIER_CATEGORY_MODEL = 'dtSupplierCategory';\n","import * as moment from 'moment';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useForm, Controller, set } from 'react-hook-form';\nimport { FilterMatchMode, FilterOperator } from 'primereact/api';\nimport { Button } from 'primereact/button';\nimport { classNames } from 'primereact/utils';\nimport { Column } from 'primereact/column';\nimport { Dialog } from 'primereact/dialog';\nimport { DataTable } from 'primereact/datatable';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { InputNumber } from 'primereact/inputnumber';\nimport { Toast } from 'primereact/toast';\nimport { Toolbar } from 'primereact/toolbar';\n\nimport SelectMasterDataOL from '../../components/SelectMasterDataOL';\n\nimport { TransactionService } from '../../../services/TransactionService';\nimport { PRODUCT_MODEL, DAMAGED_STOCK_MODEL } from '../../../constants/models';\nimport { ON_DAMAGED_STOCK } from '../../../constants/transactions';\n\nconst DamagedStock = () => {\n\n    const modelName = DAMAGED_STOCK_MODEL;\n\n    let defaultValue = {\n        date: Date.now(),\n        dtProduct_id: null,\n        quantity: 0,\n        details: '',\n    };\n\n    const toast = useRef(null);\n    const dt = useRef(null);\n    const quantityRef = useRef(null);\n    const detailsRef = useRef(null);\n\n    let defaultFilters = {\n        fields: [],\n        first: 0,\n        rows: 10,\n        page: 1,\n        sortField: null,\n        sortOrder: null,\n        filters: {\n            'name': { operator: FilterOperator.OR, constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }] },            \n        }\n    };\n\n    const [loading, setLoading] = useState(false);\n    const [totalRecords, setTotalRecords] = useState(0);\n    const [dtDamagedStock, setDamagedStock] = useState(null);\n    const [lazyParams, setLazyParams] = useState(defaultFilters);\n    const [showForm, setShowForm] = useState(false);\n    const [submitted, setSubmitted] = useState(false);\n\n    const transactionService = new TransactionService();\n\n    const {\n        register,\n        control,\n        formState: { errors },\n        resetField,\n        handleSubmit\n    } = useForm({\n        defaultValues: defaultValue\n    });\n\n    useEffect(() => {\n        initFilters();\n    }, []);\n    \n    const clearFilter = () => {\n        initFilters();\n    }\n\n    const initFilters = () => {\n        setLazyParams(defaultFilters);\n    }\n\n    useEffect(() => {\n        loadLazyData();\n    }, [lazyParams]);\n\n    const loadLazyData = () => {\n        setLoading(true);\n\n        transactionService.getAll(modelName, { params: JSON.stringify(lazyParams) }).then(data => {\n            console.log(data)\n            setTotalRecords(data.total);\n            setDamagedStock(data.rows);\n            setLoading(false);\n        });\n    }\n\n    const exportCSV = () => {\n        dt.current.exportCSV();\n    };\n    const onPage = (event) => {\n        let _lazyParams = { ...lazyParams, ...event };\n        setLazyParams(_lazyParams);\n    }\n    const onSort = (event) => {\n        let _lazyParams = { ...lazyParams, ...event };\n        setLazyParams(_lazyParams);\n    }\n\n    const onFilter = (event) => {\n        let _lazyParams = { ...lazyParams, ...event };\n        _lazyParams['first'] = 0;\n        setLazyParams(_lazyParams);\n    }\n\n    const onProductSelect = (selectedRow) => {\n        console.log(\"PRODUCT SELECTED::\", selectedRow)\n        // select quantity from stock\n        quantityRef.current.focus();\n    };\n\n    const nameBodyTemplate = (rowData) => {\n        return (\n            <>\n                {rowData.name}\n            </>\n        );\n    };\n\n    // reset all form fields\n    const resetForm = () => {\n        resetField('dtProduct_id');\n        resetField('quantity');\n        resetField('details');\n        setSubmitted(false);\n    };\n\n    // show Add form\n    const openNew = () => {\n        resetForm();\n        setShowForm(true);\n    };\n\n    const addDamagedStock = (formData) => {\n        setSubmitted(true);\n        if (quantityRef.current.value < 1) {\n            return;\n        }\n        let _data = {\n            dtProduct_id: formData.dtProduct_id,\n            quantity: formData.quantity,\n            details: formData.details,\n        };\n        console.log(_data);\n        transactionService.processTransaction(ON_DAMAGED_STOCK, _data).then(response => {\n            console.log(response);\n            if (response.success) {\n                toast.current.show({ severity: 'success', summary: 'Successful', detail: 'Damaged Stock Added', life: 3000 });\n                resetForm();\n                setShowForm(false);\n                loadLazyData();\n            } else {\n                toast.current.show({ severity: 'error', summary: 'Error', detail: response.message, life: 3000 });\n            }\n        });\n    };\n\n    const leftToolbarTemplate = () => {\n        return (\n            <React.Fragment>\n                <Button onClick={() => openNew()} className=\"p-button p-button-primary mr-2\" label=\"Add Damaged Stock\" />\n            </React.Fragment>\n        );\n    };\n\n    const rightToolbarTemplate = () => {\n        return (\n            <React.Fragment>\n                <Button label=\"Export\" icon=\"pi pi-upload\" className=\"p-button-help\" onClick={exportCSV} />\n            </React.Fragment>\n        );\n    };\n\n    const renderHeader = () => {\n        return (\n            <div className=\"flex justify-content-between\">\n                <h5 className=\"m-0\">Damaged Stock</h5>\n                <Button type=\"button\" icon=\"pi pi-filter-slash\" label=\"Refresh\" className=\"p-button-outlined\" onClick={clearFilter} />\n            </div>\n        )\n    }\n\n    const getDate = (date) => {\n        return moment(parseInt(date)).format('DD/MM/YYYY hh:mm:ss');\n    }\n\n    const dateBodyTemplate = (rowData) => {\n        return (\n            <>\n                {getDate(rowData.date)}\n            </>\n        );\n    };\n\n    const quantityBodyTemplate = (rowData) => {\n        return (\n            <>\n                {rowData.quantity}\n            </>\n        );\n    };\n\n    const detailsBodyTemplate = (rowData) => {\n        return (\n            <>\n                {rowData.details}\n            </>\n        );\n    };\n    const transferByBodyTemplate = (rowData) => {\n        return (\n            <>\n                {rowData.transferBy}\n            </>\n        );\n    };\n\n    const getFormErrorMessage = (name) => {\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\n    };\n\n    const hideForm = () => {\n        setShowForm(false);\n    };\n\n    const footerDialog = (\n        <>\n            <Button label=\"Cancel\" icon=\"pi pi-times\" className=\"p-button-text\" onClick={hideForm} />\n            <Button disabled={submitted} label=\"Save\" icon=\"pi pi-check\" className=\"p-button-text\" onClick={handleSubmit((d) => addDamagedStock(d))} />\n        </>\n    );\n\n    return (\n        <div className=\"grid crud-demo\">\n            <div className=\"col-12\">\n                <div className=\"card\">\n                    <Toast ref={toast} />\n                    <Toolbar className=\"mb-4\" left={leftToolbarTemplate} right={rightToolbarTemplate}></Toolbar>\n\n                    <DataTable\n                        ref={dt} value={dtDamagedStock} dataKey=\"_id\" \n                        className=\"datatable-responsive\" responsiveLayout=\"scroll\"\n                        lazy loading={loading} rows={lazyParams.rows}\n                        onSort={onSort} sortField={lazyParams.sortField} sortOrder={lazyParams.sortOrder}\n                        onFilter={onFilter} filters={lazyParams.filters} filterDisplay=\"menu\"\n                        scrollable columnResizeMode=\"expand\" resizableColumns showGridlines\n                        paginator totalRecords={totalRecords} onPage={onPage} first={lazyParams.first}\n                        paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\" \n                        rowsPerPageOptions={[5,10,25,50]}\n                        currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\n                        emptyMessage=\"No data found.\" header={renderHeader} \n                    >\n                        <Column field=\"date\" header=\"Transaction Datetime\" filter filterPlaceholder=\"Search by name\" sortable body={dateBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>                        \n                        <Column field=\"dtProduct_id\" header=\"Product Name\" filter filterPlaceholder=\"Search by name\" sortable body={nameBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>                        \n                        <Column field=\"quantity\" header=\"Quantity\" filter filterPlaceholder=\"Search by name\" sortable body={quantityBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>                        \n                        <Column field=\"details\" header=\"Details\" filter filterPlaceholder=\"Search by name\" sortable body={detailsBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>                        \n                        <Column field=\"transferBy\" header=\"Transfer by\" filter filterPlaceholder=\"Search by name\" sortable body={transferByBodyTemplate} headerStyle={{ minWidth: '15rem' }}></Column>                        \n                    </DataTable>\n\n                    <Dialog visible={showForm} style={{ width: '450px' }} header={`Add Damaged Stock`} modal className=\"p-fluid\" footer={footerDialog} onHide={hideForm}>                    \n                        <div className=\"p-fluid formgrid grid\">\n                            <div className=\"field col-12 md:col-6\">\n                            <Controller\n                                name=\"dtProduct_id\"\n                                control={control}\n                                rules={{ required: 'Product is required.' }}\n                                    render={({ field, fieldState }) => (\n                                    <>\n                                        <label htmlFor={field.name} className={classNames({ 'p-error': errors.value })}>Product*</label>\n                                        <SelectMasterDataOL field={field} modelName={PRODUCT_MODEL}\n                                            displayField=\"name\"\n                                            className={classNames({ 'p-invalid': fieldState.error })} \n                                            onSelect={onProductSelect}\n                                            defaultFilters={defaultFilters}\n                                            columns={[\n                                                {field: 'name', header: 'Product Name', filterPlaceholder: 'Filter by Product Name', width: '50rem'}, \n                                                {field: 'brandName', header: 'Brand Name', filterPlaceholder: 'Filter by Barnd Name', width: '15rem'},\n                                                {field: 'modelNo', header: 'Model No', filterPlaceholder: 'Filter by Model No', width: '15rem'},\n                                                {field: 'partNumber', header: 'Part Number', filterPlaceholder: 'Filter by Part Number', width: '15rem'},\n                                                {field: 'dtProductCategory_id_shortname', header: 'Product Category', filterPlaceholder: 'Filter by Product Category', width: '15rem'}\n                                            ]} />\n                                        {getFormErrorMessage(field.name)}\n                                    </>\n                                )}/>                            \n                            </div>\n                            <div className=\"field col-12 md:col-6\">\n                            <Controller\n                                name=\"quantity\"\n                                control={control}\n                                rules={{\n                                    validate: (value) => (value > 0) || 'Quantity greater than 0 is required'\n                                }}\n                                render={({ field, fieldState }) => (\n                                <>\n                                    <label htmlFor=\"quantity\">Quantity*</label>\n                                    <InputNumber ref={quantityRef}\n                                        inputId={field.name} value={field.value} inputRef={field.ref} \n                                        onValueChange={(e) => field.onChange(e)} \n                                        className={classNames({ 'p-invalid': fieldState.error })} />\n                                    {getFormErrorMessage(field.name)}\n                                </>\n                            )}/>\n                            </div>                            \n                            <div className=\"field col-12 md:col-12\">\n                            <Controller\n                                name=\"details\"\n                                control={control}\n                                rules={{ required: 'Details is required.' }}\n                                render={({ field, fieldState }) => (\n                                <>\n                                    <label htmlFor=\"details\">Details*</label>\n                                    <InputTextarea ref={detailsRef}\n                                        inputId={field.name} value={field.value} inputRef={field.ref} keyfilter=\"text\" \n                                        className={classNames({ 'p-invalid': fieldState.error })} \n                                        onChange={(e) => field.onChange(e.target.value)} rows={3} cols={20} />\n                                    {getFormErrorMessage(field.name)}\n                                </>\n                            )}/>\n                            </div>\n                        </div>\n                    </Dialog>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DamagedStock;"],"names":["BANK_MODEL","BANK_ACCOUNT_MODEL","CASH_MODEL","CUSTOMER_MODEL","EMPLOYEE_MODEL","EMP_HISTORY_MODEL","PRODUCT_MODEL","SUPPLIER_MODEL","WAREHOUSE_MODEL","STOCK_MODEL","DAMAGED_STOCK_MODEL","STOCK_ADJUSTMENT_MODEL","EXPENSE_MODEL","EXTRA_INCOME_MODEL","PURCHASE_MODEL","SALES_MODEL","STOCK_IN_MODEL","STOCK_OUT_MODEL","ACC_RECIEVABLE","ACC_PAYABLE","BANK_REGISTER","CASH_REGISTER","PYAMENT_REGISTER","CUSTOMER_CATEGORY_MODEL","DEPARTMENT_MODEL","DESIGNATION_MODEL","EXPENSE_TYPE_MODEL","EXTRA_INCOME_TYPE_MODEL","GRADE_MODEL","GROUP_MODEL","OFFICE_TIME_MODEL","PAYMENT_TYPE_MODEL","PRODUCT_CATEGORY_MODEL","ROUTE_MODEL","SUPPLIER_CATEGORY_MODEL","modelName","defaultValue","date","Date","now","dtProduct_id","quantity","details","toast","useRef","dt","quantityRef","detailsRef","defaultFilters","fields","first","rows","page","sortField","sortOrder","filters","operator","FilterOperator","constraints","value","matchMode","FilterMatchMode","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","totalRecords","setTotalRecords","_useState5","_useState6","dtDamagedStock","setDamagedStock","_useState7","_useState8","lazyParams","setLazyParams","_useState9","_useState10","showForm","setShowForm","_useState11","_useState12","submitted","setSubmitted","transactionService","TransactionService","_useForm","useForm","defaultValues","control","register","errors","formState","resetField","handleSubmit","useEffect","initFilters","clearFilter","loadLazyData","getAll","params","JSON","stringify","then","data","console","log","total","exportCSV","current","onProductSelect","selectedRow","focus","resetForm","getFormErrorMessage","name","_jsx","className","children","message","hideForm","footerDialog","_jsxs","_Fragment","Button","label","icon","onClick","disabled","d","formData","_data","processTransaction","ON_DAMAGED_STOCK","response","success","show","severity","summary","detail","life","addDamagedStock","Toast","ref","Toolbar","left","React","right","DataTable","dataKey","responsiveLayout","lazy","onSort","event","_lazyParams","_objectSpread","onFilter","filterDisplay","scrollable","columnResizeMode","resizableColumns","showGridlines","paginator","onPage","paginatorTemplate","rowsPerPageOptions","currentPageReportTemplate","emptyMessage","header","type","Column","field","filter","filterPlaceholder","sortable","body","rowData","moment","parseInt","format","headerStyle","minWidth","transferBy","Dialog","visible","style","width","modal","footer","onHide","Controller","rules","required","render","_ref","fieldState","htmlFor","classNames","SelectMasterDataOL","displayField","error","onSelect","columns","validate","_ref2","InputNumber","inputId","inputRef","onValueChange","e","onChange","_ref3","InputTextarea","keyfilter","target","cols"],"sourceRoot":""}